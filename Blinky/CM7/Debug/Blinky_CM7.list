
Blinky_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001bcc  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001e64  08001e64  00011e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e74  08001e74  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08001e74  08001e74  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001e74  08001e74  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e74  08001e74  00011e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001e78  08001e78  00011e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08001e7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  24000010  08001e8c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000030  08001e8c  00020030  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007e01  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013f9  00000000  00000000  00027e3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f0  00000000  00000000  00029238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000648  00000000  00000000  00029928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003cf13  00000000  00000000  00029f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007ca5  00000000  00000000  00066e83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018bdfa  00000000  00000000  0006eb28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001fa922  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a84  00000000  00000000  001fa974  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08001e4c 	.word	0x08001e4c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08001e4c 	.word	0x08001e4c

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3d      	ldr	r3, [pc, #244]	; (80003d4 <SystemInit+0xfc>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3c      	ldr	r2, [pc, #240]	; (80003d4 <SystemInit+0xfc>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b39      	ldr	r3, [pc, #228]	; (80003d4 <SystemInit+0xfc>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a38      	ldr	r2, [pc, #224]	; (80003d4 <SystemInit+0xfc>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b37      	ldr	r3, [pc, #220]	; (80003d8 <SystemInit+0x100>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b34      	ldr	r3, [pc, #208]	; (80003d8 <SystemInit+0x100>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a32      	ldr	r2, [pc, #200]	; (80003d8 <SystemInit+0x100>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b31      	ldr	r3, [pc, #196]	; (80003dc <SystemInit+0x104>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a30      	ldr	r2, [pc, #192]	; (80003dc <SystemInit+0x104>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b2e      	ldr	r3, [pc, #184]	; (80003dc <SystemInit+0x104>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2d      	ldr	r3, [pc, #180]	; (80003dc <SystemInit+0x104>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492c      	ldr	r1, [pc, #176]	; (80003dc <SystemInit+0x104>)
 800032c:	4b2c      	ldr	r3, [pc, #176]	; (80003e0 <SystemInit+0x108>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b29      	ldr	r3, [pc, #164]	; (80003d8 <SystemInit+0x100>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b26      	ldr	r3, [pc, #152]	; (80003d8 <SystemInit+0x100>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a24      	ldr	r2, [pc, #144]	; (80003d8 <SystemInit+0x100>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b23      	ldr	r3, [pc, #140]	; (80003dc <SystemInit+0x104>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b21      	ldr	r3, [pc, #132]	; (80003dc <SystemInit+0x104>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b20      	ldr	r3, [pc, #128]	; (80003dc <SystemInit+0x104>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b1e      	ldr	r3, [pc, #120]	; (80003dc <SystemInit+0x104>)
 8000362:	4a20      	ldr	r2, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1d      	ldr	r3, [pc, #116]	; (80003dc <SystemInit+0x104>)
 8000368:	4a1f      	ldr	r2, [pc, #124]	; (80003e8 <SystemInit+0x110>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <SystemInit+0x104>)
 800036e:	4a1f      	ldr	r2, [pc, #124]	; (80003ec <SystemInit+0x114>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1a      	ldr	r3, [pc, #104]	; (80003dc <SystemInit+0x104>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b18      	ldr	r3, [pc, #96]	; (80003dc <SystemInit+0x104>)
 800037a:	4a1c      	ldr	r2, [pc, #112]	; (80003ec <SystemInit+0x114>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b17      	ldr	r3, [pc, #92]	; (80003dc <SystemInit+0x104>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b15      	ldr	r3, [pc, #84]	; (80003dc <SystemInit+0x104>)
 8000386:	4a19      	ldr	r2, [pc, #100]	; (80003ec <SystemInit+0x114>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b14      	ldr	r3, [pc, #80]	; (80003dc <SystemInit+0x104>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b12      	ldr	r3, [pc, #72]	; (80003dc <SystemInit+0x104>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a11      	ldr	r2, [pc, #68]	; (80003dc <SystemInit+0x104>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <SystemInit+0x104>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b13      	ldr	r3, [pc, #76]	; (80003f0 <SystemInit+0x118>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a12      	ldr	r2, [pc, #72]	; (80003f0 <SystemInit+0x118>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <SystemInit+0x11c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <SystemInit+0x120>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <SystemInit+0x124>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <SystemInit+0x128>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	e000ed00 	.word	0xe000ed00
 80003d8:	52002000 	.word	0x52002000
 80003dc:	58024400 	.word	0x58024400
 80003e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80003e4:	02020200 	.word	0x02020200
 80003e8:	01ff0000 	.word	0x01ff0000
 80003ec:	01010280 	.word	0x01010280
 80003f0:	580000c0 	.word	0x580000c0
 80003f4:	5c001000 	.word	0x5c001000
 80003f8:	ffff0000 	.word	0xffff0000
 80003fc:	51008108 	.word	0x51008108
 8000400:	52004000 	.word	0x52004000

08000404 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b084      	sub	sp, #16
 8000408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int32_t cnt = 0;
 800040a:	2300      	movs	r3, #0
 800040c:	60fb      	str	r3, [r7, #12]
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
#if 1
  timeout = 0xFFFF;
 800040e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000412:	60bb      	str	r3, [r7, #8]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000414:	bf00      	nop
 8000416:	4b2a      	ldr	r3, [pc, #168]	; (80004c0 <main+0xbc>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800041e:	2b00      	cmp	r3, #0
 8000420:	d004      	beq.n	800042c <main+0x28>
 8000422:	68bb      	ldr	r3, [r7, #8]
 8000424:	1e5a      	subs	r2, r3, #1
 8000426:	60ba      	str	r2, [r7, #8]
 8000428:	2b00      	cmp	r3, #0
 800042a:	dcf4      	bgt.n	8000416 <main+0x12>
  if ( timeout < 0 )
 800042c:	68bb      	ldr	r3, [r7, #8]
 800042e:	2b00      	cmp	r3, #0
 8000430:	da01      	bge.n	8000436 <main+0x32>
  {
  Error_Handler();
 8000432:	f000 f915 	bl	8000660 <Error_Handler>
#endif
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000436:	f000 f987 	bl	8000748 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800043a:	f000 f845 	bl	80004c8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800043e:	4b20      	ldr	r3, [pc, #128]	; (80004c0 <main+0xbc>)
 8000440:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000444:	4a1e      	ldr	r2, [pc, #120]	; (80004c0 <main+0xbc>)
 8000446:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800044a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800044e:	4b1c      	ldr	r3, [pc, #112]	; (80004c0 <main+0xbc>)
 8000450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000458:	607b      	str	r3, [r7, #4]
 800045a:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800045c:	2000      	movs	r0, #0
 800045e:	f000 fce3 	bl	8000e28 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000462:	2100      	movs	r1, #0
 8000464:	2000      	movs	r0, #0
 8000466:	f000 fcf9 	bl	8000e5c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800046a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800046e:	60bb      	str	r3, [r7, #8]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000470:	bf00      	nop
 8000472:	4b13      	ldr	r3, [pc, #76]	; (80004c0 <main+0xbc>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800047a:	2b00      	cmp	r3, #0
 800047c:	d104      	bne.n	8000488 <main+0x84>
 800047e:	68bb      	ldr	r3, [r7, #8]
 8000480:	1e5a      	subs	r2, r3, #1
 8000482:	60ba      	str	r2, [r7, #8]
 8000484:	2b00      	cmp	r3, #0
 8000486:	dcf4      	bgt.n	8000472 <main+0x6e>
if ( timeout < 0 )
 8000488:	68bb      	ldr	r3, [r7, #8]
 800048a:	2b00      	cmp	r3, #0
 800048c:	da01      	bge.n	8000492 <main+0x8e>
{
Error_Handler();
 800048e:	f000 f8e7 	bl	8000660 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000492:	f000 f893 	bl	80005bc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  USER_GPIO_Init();
 8000496:	f000 f8ab 	bl	80005f0 <USER_GPIO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_12);
 800049a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800049e:	4809      	ldr	r0, [pc, #36]	; (80004c4 <main+0xc0>)
 80004a0:	f000 fca8 	bl	8000df4 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80004a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004a8:	f000 f9e0 	bl	800086c <HAL_Delay>
	  if ((cnt % 2) == 0) {
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	f003 0301 	and.w	r3, r3, #1
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d100      	bne.n	80004b8 <main+0xb4>
		  __SEV();
 80004b6:	bf40      	sev
	  }
	  cnt++;
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	3301      	adds	r3, #1
 80004bc:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_12);
 80004be:	e7ec      	b.n	800049a <main+0x96>
 80004c0:	58024400 	.word	0x58024400
 80004c4:	58022000 	.word	0x58022000

080004c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b09c      	sub	sp, #112	; 0x70
 80004cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004d2:	224c      	movs	r2, #76	; 0x4c
 80004d4:	2100      	movs	r1, #0
 80004d6:	4618      	mov	r0, r3
 80004d8:	f001 fcb0 	bl	8001e3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004dc:	1d3b      	adds	r3, r7, #4
 80004de:	2220      	movs	r2, #32
 80004e0:	2100      	movs	r1, #0
 80004e2:	4618      	mov	r0, r3
 80004e4:	f001 fcaa 	bl	8001e3c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80004e8:	2004      	movs	r0, #4
 80004ea:	f000 fccb 	bl	8000e84 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80004ee:	2300      	movs	r3, #0
 80004f0:	603b      	str	r3, [r7, #0]
 80004f2:	4b30      	ldr	r3, [pc, #192]	; (80005b4 <SystemClock_Config+0xec>)
 80004f4:	699b      	ldr	r3, [r3, #24]
 80004f6:	4a2f      	ldr	r2, [pc, #188]	; (80005b4 <SystemClock_Config+0xec>)
 80004f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80004fc:	6193      	str	r3, [r2, #24]
 80004fe:	4b2d      	ldr	r3, [pc, #180]	; (80005b4 <SystemClock_Config+0xec>)
 8000500:	699b      	ldr	r3, [r3, #24]
 8000502:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000506:	603b      	str	r3, [r7, #0]
 8000508:	4b2b      	ldr	r3, [pc, #172]	; (80005b8 <SystemClock_Config+0xf0>)
 800050a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800050c:	4a2a      	ldr	r2, [pc, #168]	; (80005b8 <SystemClock_Config+0xf0>)
 800050e:	f043 0301 	orr.w	r3, r3, #1
 8000512:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000514:	4b28      	ldr	r3, [pc, #160]	; (80005b8 <SystemClock_Config+0xf0>)
 8000516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000518:	f003 0301 	and.w	r3, r3, #1
 800051c:	603b      	str	r3, [r7, #0]
 800051e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000520:	bf00      	nop
 8000522:	4b24      	ldr	r3, [pc, #144]	; (80005b4 <SystemClock_Config+0xec>)
 8000524:	699b      	ldr	r3, [r3, #24]
 8000526:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800052a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800052e:	d1f8      	bne.n	8000522 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000530:	2301      	movs	r3, #1
 8000532:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000534:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000538:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800053a:	2302      	movs	r3, #2
 800053c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800053e:	2302      	movs	r3, #2
 8000540:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000542:	2305      	movs	r3, #5
 8000544:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000546:	23c0      	movs	r3, #192	; 0xc0
 8000548:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800054a:	2302      	movs	r3, #2
 800054c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800054e:	2302      	movs	r3, #2
 8000550:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000552:	2302      	movs	r3, #2
 8000554:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000556:	2308      	movs	r3, #8
 8000558:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800055a:	2300      	movs	r3, #0
 800055c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800055e:	2300      	movs	r3, #0
 8000560:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000562:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000566:	4618      	mov	r0, r3
 8000568:	f000 fce6 	bl	8000f38 <HAL_RCC_OscConfig>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000572:	f000 f875 	bl	8000660 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000576:	233f      	movs	r3, #63	; 0x3f
 8000578:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800057a:	2303      	movs	r3, #3
 800057c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800057e:	2300      	movs	r3, #0
 8000580:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000582:	2308      	movs	r3, #8
 8000584:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000586:	2340      	movs	r3, #64	; 0x40
 8000588:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800058a:	2340      	movs	r3, #64	; 0x40
 800058c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800058e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000592:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000594:	2340      	movs	r3, #64	; 0x40
 8000596:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000598:	1d3b      	adds	r3, r7, #4
 800059a:	2104      	movs	r1, #4
 800059c:	4618      	mov	r0, r3
 800059e:	f001 f8f9 	bl	8001794 <HAL_RCC_ClockConfig>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80005a8:	f000 f85a 	bl	8000660 <Error_Handler>
  }
}
 80005ac:	bf00      	nop
 80005ae:	3770      	adds	r7, #112	; 0x70
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	58024800 	.word	0x58024800
 80005b8:	58000400 	.word	0x58000400

080005bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005c2:	4b0a      	ldr	r3, [pc, #40]	; (80005ec <MX_GPIO_Init+0x30>)
 80005c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005c8:	4a08      	ldr	r2, [pc, #32]	; (80005ec <MX_GPIO_Init+0x30>)
 80005ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005d2:	4b06      	ldr	r3, [pc, #24]	; (80005ec <MX_GPIO_Init+0x30>)
 80005d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	687b      	ldr	r3, [r7, #4]

}
 80005e0:	bf00      	nop
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr
 80005ec:	58024400 	.word	0x58024400

080005f0 <USER_GPIO_Init>:

/* USER CODE BEGIN 4 */
static void USER_GPIO_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b086      	sub	sp, #24
 80005f4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef  GPIO_InitStruct;

	__HAL_RCC_GPIOI_CLK_ENABLE();
 80005f6:	4b18      	ldr	r3, [pc, #96]	; (8000658 <USER_GPIO_Init+0x68>)
 80005f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005fc:	4a16      	ldr	r2, [pc, #88]	; (8000658 <USER_GPIO_Init+0x68>)
 80005fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000602:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000606:	4b14      	ldr	r3, [pc, #80]	; (8000658 <USER_GPIO_Init+0x68>)
 8000608:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800060c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000610:	603b      	str	r3, [r7, #0]
 8000612:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000614:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000618:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061a:	2301      	movs	r3, #1
 800061c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800061e:	2301      	movs	r3, #1
 8000620:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000622:	2303      	movs	r3, #3
 8000624:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	4619      	mov	r1, r3
 800062a:	480c      	ldr	r0, [pc, #48]	; (800065c <USER_GPIO_Init+0x6c>)
 800062c:	f000 fa32 	bl	8000a94 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000630:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000634:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	4619      	mov	r1, r3
 800063a:	4808      	ldr	r0, [pc, #32]	; (800065c <USER_GPIO_Init+0x6c>)
 800063c:	f000 fa2a 	bl	8000a94 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000640:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000644:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	4619      	mov	r1, r3
 800064a:	4804      	ldr	r0, [pc, #16]	; (800065c <USER_GPIO_Init+0x6c>)
 800064c:	f000 fa22 	bl	8000a94 <HAL_GPIO_Init>

}
 8000650:	bf00      	nop
 8000652:	3718      	adds	r7, #24
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	58024400 	.word	0x58024400
 800065c:	58022000 	.word	0x58022000

08000660 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000664:	b672      	cpsid	i
}
 8000666:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000668:	e7fe      	b.n	8000668 <Error_Handler+0x8>
	...

0800066c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000672:	4b0a      	ldr	r3, [pc, #40]	; (800069c <HAL_MspInit+0x30>)
 8000674:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000678:	4a08      	ldr	r2, [pc, #32]	; (800069c <HAL_MspInit+0x30>)
 800067a:	f043 0302 	orr.w	r3, r3, #2
 800067e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000682:	4b06      	ldr	r3, [pc, #24]	; (800069c <HAL_MspInit+0x30>)
 8000684:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000688:	f003 0302 	and.w	r3, r3, #2
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000690:	bf00      	nop
 8000692:	370c      	adds	r7, #12
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	58024400 	.word	0x58024400

080006a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006a4:	e7fe      	b.n	80006a4 <NMI_Handler+0x4>

080006a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006a6:	b480      	push	{r7}
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006aa:	e7fe      	b.n	80006aa <HardFault_Handler+0x4>

080006ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <MemManage_Handler+0x4>

080006b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006b2:	b480      	push	{r7}
 80006b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006b6:	e7fe      	b.n	80006b6 <BusFault_Handler+0x4>

080006b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006bc:	e7fe      	b.n	80006bc <UsageFault_Handler+0x4>

080006be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006be:	b480      	push	{r7}
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006c2:	bf00      	nop
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr

080006cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006d0:	bf00      	nop
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr

080006da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006da:	b480      	push	{r7}
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006de:	bf00      	nop
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr

080006e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006ec:	f000 f89e 	bl	800082c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80006f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800072c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80006f8:	f7ff fdee 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006fc:	480c      	ldr	r0, [pc, #48]	; (8000730 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006fe:	490d      	ldr	r1, [pc, #52]	; (8000734 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000700:	4a0d      	ldr	r2, [pc, #52]	; (8000738 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000702:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000704:	e002      	b.n	800070c <LoopCopyDataInit>

08000706 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000706:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000708:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800070a:	3304      	adds	r3, #4

0800070c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800070c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800070e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000710:	d3f9      	bcc.n	8000706 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000712:	4a0a      	ldr	r2, [pc, #40]	; (800073c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000714:	4c0a      	ldr	r4, [pc, #40]	; (8000740 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000716:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000718:	e001      	b.n	800071e <LoopFillZerobss>

0800071a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800071a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800071c:	3204      	adds	r2, #4

0800071e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800071e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000720:	d3fb      	bcc.n	800071a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000722:	f001 fb67 	bl	8001df4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000726:	f7ff fe6d 	bl	8000404 <main>
  bx  lr
 800072a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800072c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000730:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000734:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000738:	08001e7c 	.word	0x08001e7c
  ldr r2, =_sbss
 800073c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000740:	24000030 	.word	0x24000030

08000744 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000744:	e7fe      	b.n	8000744 <ADC3_IRQHandler>
	...

08000748 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800074e:	2003      	movs	r0, #3
 8000750:	f000 f96e 	bl	8000a30 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000754:	f001 f9d4 	bl	8001b00 <HAL_RCC_GetSysClockFreq>
 8000758:	4602      	mov	r2, r0
 800075a:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <HAL_Init+0x68>)
 800075c:	699b      	ldr	r3, [r3, #24]
 800075e:	0a1b      	lsrs	r3, r3, #8
 8000760:	f003 030f 	and.w	r3, r3, #15
 8000764:	4913      	ldr	r1, [pc, #76]	; (80007b4 <HAL_Init+0x6c>)
 8000766:	5ccb      	ldrb	r3, [r1, r3]
 8000768:	f003 031f 	and.w	r3, r3, #31
 800076c:	fa22 f303 	lsr.w	r3, r2, r3
 8000770:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000772:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <HAL_Init+0x68>)
 8000774:	699b      	ldr	r3, [r3, #24]
 8000776:	f003 030f 	and.w	r3, r3, #15
 800077a:	4a0e      	ldr	r2, [pc, #56]	; (80007b4 <HAL_Init+0x6c>)
 800077c:	5cd3      	ldrb	r3, [r2, r3]
 800077e:	f003 031f 	and.w	r3, r3, #31
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	fa22 f303 	lsr.w	r3, r2, r3
 8000788:	4a0b      	ldr	r2, [pc, #44]	; (80007b8 <HAL_Init+0x70>)
 800078a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800078c:	4a0b      	ldr	r2, [pc, #44]	; (80007bc <HAL_Init+0x74>)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000792:	2000      	movs	r0, #0
 8000794:	f000 f814 	bl	80007c0 <HAL_InitTick>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800079e:	2301      	movs	r3, #1
 80007a0:	e002      	b.n	80007a8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80007a2:	f7ff ff63 	bl	800066c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007a6:	2300      	movs	r3, #0
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	58024400 	.word	0x58024400
 80007b4:	08001e64 	.word	0x08001e64
 80007b8:	24000004 	.word	0x24000004
 80007bc:	24000000 	.word	0x24000000

080007c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80007c8:	4b15      	ldr	r3, [pc, #84]	; (8000820 <HAL_InitTick+0x60>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d101      	bne.n	80007d4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80007d0:	2301      	movs	r3, #1
 80007d2:	e021      	b.n	8000818 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80007d4:	4b13      	ldr	r3, [pc, #76]	; (8000824 <HAL_InitTick+0x64>)
 80007d6:	681a      	ldr	r2, [r3, #0]
 80007d8:	4b11      	ldr	r3, [pc, #68]	; (8000820 <HAL_InitTick+0x60>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	4619      	mov	r1, r3
 80007de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ea:	4618      	mov	r0, r3
 80007ec:	f000 f945 	bl	8000a7a <HAL_SYSTICK_Config>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80007f6:	2301      	movs	r3, #1
 80007f8:	e00e      	b.n	8000818 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2b0f      	cmp	r3, #15
 80007fe:	d80a      	bhi.n	8000816 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000800:	2200      	movs	r2, #0
 8000802:	6879      	ldr	r1, [r7, #4]
 8000804:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000808:	f000 f91d 	bl	8000a46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800080c:	4a06      	ldr	r2, [pc, #24]	; (8000828 <HAL_InitTick+0x68>)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000812:	2300      	movs	r3, #0
 8000814:	e000      	b.n	8000818 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000816:	2301      	movs	r3, #1
}
 8000818:	4618      	mov	r0, r3
 800081a:	3708      	adds	r7, #8
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	2400000c 	.word	0x2400000c
 8000824:	24000000 	.word	0x24000000
 8000828:	24000008 	.word	0x24000008

0800082c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <HAL_IncTick+0x20>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	461a      	mov	r2, r3
 8000836:	4b06      	ldr	r3, [pc, #24]	; (8000850 <HAL_IncTick+0x24>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4413      	add	r3, r2
 800083c:	4a04      	ldr	r2, [pc, #16]	; (8000850 <HAL_IncTick+0x24>)
 800083e:	6013      	str	r3, [r2, #0]
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	2400000c 	.word	0x2400000c
 8000850:	2400002c 	.word	0x2400002c

08000854 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  return uwTick;
 8000858:	4b03      	ldr	r3, [pc, #12]	; (8000868 <HAL_GetTick+0x14>)
 800085a:	681b      	ldr	r3, [r3, #0]
}
 800085c:	4618      	mov	r0, r3
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	2400002c 	.word	0x2400002c

0800086c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000874:	f7ff ffee 	bl	8000854 <HAL_GetTick>
 8000878:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000884:	d005      	beq.n	8000892 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000886:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <HAL_Delay+0x44>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	461a      	mov	r2, r3
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	4413      	add	r3, r2
 8000890:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000892:	bf00      	nop
 8000894:	f7ff ffde 	bl	8000854 <HAL_GetTick>
 8000898:	4602      	mov	r2, r0
 800089a:	68bb      	ldr	r3, [r7, #8]
 800089c:	1ad3      	subs	r3, r2, r3
 800089e:	68fa      	ldr	r2, [r7, #12]
 80008a0:	429a      	cmp	r2, r3
 80008a2:	d8f7      	bhi.n	8000894 <HAL_Delay+0x28>
  {
  }
}
 80008a4:	bf00      	nop
 80008a6:	bf00      	nop
 80008a8:	3710      	adds	r7, #16
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	2400000c 	.word	0x2400000c

080008b4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80008b8:	4b03      	ldr	r3, [pc, #12]	; (80008c8 <HAL_GetREVID+0x14>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	0c1b      	lsrs	r3, r3, #16
}
 80008be:	4618      	mov	r0, r3
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	5c001000 	.word	0x5c001000

080008cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	f003 0307 	and.w	r3, r3, #7
 80008da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008dc:	4b0b      	ldr	r3, [pc, #44]	; (800090c <__NVIC_SetPriorityGrouping+0x40>)
 80008de:	68db      	ldr	r3, [r3, #12]
 80008e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008e2:	68ba      	ldr	r2, [r7, #8]
 80008e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008e8:	4013      	ands	r3, r2
 80008ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <__NVIC_SetPriorityGrouping+0x44>)
 80008f6:	4313      	orrs	r3, r2
 80008f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008fa:	4a04      	ldr	r2, [pc, #16]	; (800090c <__NVIC_SetPriorityGrouping+0x40>)
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	60d3      	str	r3, [r2, #12]
}
 8000900:	bf00      	nop
 8000902:	3714      	adds	r7, #20
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr
 800090c:	e000ed00 	.word	0xe000ed00
 8000910:	05fa0000 	.word	0x05fa0000

08000914 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000918:	4b04      	ldr	r3, [pc, #16]	; (800092c <__NVIC_GetPriorityGrouping+0x18>)
 800091a:	68db      	ldr	r3, [r3, #12]
 800091c:	0a1b      	lsrs	r3, r3, #8
 800091e:	f003 0307 	and.w	r3, r3, #7
}
 8000922:	4618      	mov	r0, r3
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	e000ed00 	.word	0xe000ed00

08000930 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	6039      	str	r1, [r7, #0]
 800093a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800093c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000940:	2b00      	cmp	r3, #0
 8000942:	db0a      	blt.n	800095a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	b2da      	uxtb	r2, r3
 8000948:	490c      	ldr	r1, [pc, #48]	; (800097c <__NVIC_SetPriority+0x4c>)
 800094a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800094e:	0112      	lsls	r2, r2, #4
 8000950:	b2d2      	uxtb	r2, r2
 8000952:	440b      	add	r3, r1
 8000954:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000958:	e00a      	b.n	8000970 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	b2da      	uxtb	r2, r3
 800095e:	4908      	ldr	r1, [pc, #32]	; (8000980 <__NVIC_SetPriority+0x50>)
 8000960:	88fb      	ldrh	r3, [r7, #6]
 8000962:	f003 030f 	and.w	r3, r3, #15
 8000966:	3b04      	subs	r3, #4
 8000968:	0112      	lsls	r2, r2, #4
 800096a:	b2d2      	uxtb	r2, r2
 800096c:	440b      	add	r3, r1
 800096e:	761a      	strb	r2, [r3, #24]
}
 8000970:	bf00      	nop
 8000972:	370c      	adds	r7, #12
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr
 800097c:	e000e100 	.word	0xe000e100
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000984:	b480      	push	{r7}
 8000986:	b089      	sub	sp, #36	; 0x24
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	f003 0307 	and.w	r3, r3, #7
 8000996:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000998:	69fb      	ldr	r3, [r7, #28]
 800099a:	f1c3 0307 	rsb	r3, r3, #7
 800099e:	2b04      	cmp	r3, #4
 80009a0:	bf28      	it	cs
 80009a2:	2304      	movcs	r3, #4
 80009a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009a6:	69fb      	ldr	r3, [r7, #28]
 80009a8:	3304      	adds	r3, #4
 80009aa:	2b06      	cmp	r3, #6
 80009ac:	d902      	bls.n	80009b4 <NVIC_EncodePriority+0x30>
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	3b03      	subs	r3, #3
 80009b2:	e000      	b.n	80009b6 <NVIC_EncodePriority+0x32>
 80009b4:	2300      	movs	r3, #0
 80009b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009bc:	69bb      	ldr	r3, [r7, #24]
 80009be:	fa02 f303 	lsl.w	r3, r2, r3
 80009c2:	43da      	mvns	r2, r3
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	401a      	ands	r2, r3
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	fa01 f303 	lsl.w	r3, r1, r3
 80009d6:	43d9      	mvns	r1, r3
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009dc:	4313      	orrs	r3, r2
         );
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3724      	adds	r7, #36	; 0x24
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
	...

080009ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	3b01      	subs	r3, #1
 80009f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009fc:	d301      	bcc.n	8000a02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009fe:	2301      	movs	r3, #1
 8000a00:	e00f      	b.n	8000a22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a02:	4a0a      	ldr	r2, [pc, #40]	; (8000a2c <SysTick_Config+0x40>)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	3b01      	subs	r3, #1
 8000a08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a0a:	210f      	movs	r1, #15
 8000a0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a10:	f7ff ff8e 	bl	8000930 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a14:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <SysTick_Config+0x40>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a1a:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <SysTick_Config+0x40>)
 8000a1c:	2207      	movs	r2, #7
 8000a1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a20:	2300      	movs	r3, #0
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	e000e010 	.word	0xe000e010

08000a30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a38:	6878      	ldr	r0, [r7, #4]
 8000a3a:	f7ff ff47 	bl	80008cc <__NVIC_SetPriorityGrouping>
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b086      	sub	sp, #24
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	60b9      	str	r1, [r7, #8]
 8000a50:	607a      	str	r2, [r7, #4]
 8000a52:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a54:	f7ff ff5e 	bl	8000914 <__NVIC_GetPriorityGrouping>
 8000a58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	68b9      	ldr	r1, [r7, #8]
 8000a5e:	6978      	ldr	r0, [r7, #20]
 8000a60:	f7ff ff90 	bl	8000984 <NVIC_EncodePriority>
 8000a64:	4602      	mov	r2, r0
 8000a66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a6a:	4611      	mov	r1, r2
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff ff5f 	bl	8000930 <__NVIC_SetPriority>
}
 8000a72:	bf00      	nop
 8000a74:	3718      	adds	r7, #24
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b082      	sub	sp, #8
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f7ff ffb2 	bl	80009ec <SysTick_Config>
 8000a88:	4603      	mov	r3, r0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
	...

08000a94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b089      	sub	sp, #36	; 0x24
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000aa2:	4b89      	ldr	r3, [pc, #548]	; (8000cc8 <HAL_GPIO_Init+0x234>)
 8000aa4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000aa6:	e194      	b.n	8000dd2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	2101      	movs	r1, #1
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000ab8:	693b      	ldr	r3, [r7, #16]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	f000 8186 	beq.w	8000dcc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	f003 0303 	and.w	r3, r3, #3
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d005      	beq.n	8000ad8 <HAL_GPIO_Init+0x44>
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	f003 0303 	and.w	r3, r3, #3
 8000ad4:	2b02      	cmp	r3, #2
 8000ad6:	d130      	bne.n	8000b3a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	689b      	ldr	r3, [r3, #8]
 8000adc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	2203      	movs	r2, #3
 8000ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae8:	43db      	mvns	r3, r3
 8000aea:	69ba      	ldr	r2, [r7, #24]
 8000aec:	4013      	ands	r3, r2
 8000aee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	68da      	ldr	r2, [r3, #12]
 8000af4:	69fb      	ldr	r3, [r7, #28]
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	fa02 f303 	lsl.w	r3, r2, r3
 8000afc:	69ba      	ldr	r2, [r7, #24]
 8000afe:	4313      	orrs	r3, r2
 8000b00:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	69ba      	ldr	r2, [r7, #24]
 8000b06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b0e:	2201      	movs	r2, #1
 8000b10:	69fb      	ldr	r3, [r7, #28]
 8000b12:	fa02 f303 	lsl.w	r3, r2, r3
 8000b16:	43db      	mvns	r3, r3
 8000b18:	69ba      	ldr	r2, [r7, #24]
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	091b      	lsrs	r3, r3, #4
 8000b24:	f003 0201 	and.w	r2, r3, #1
 8000b28:	69fb      	ldr	r3, [r7, #28]
 8000b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2e:	69ba      	ldr	r2, [r7, #24]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	69ba      	ldr	r2, [r7, #24]
 8000b38:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	f003 0303 	and.w	r3, r3, #3
 8000b42:	2b03      	cmp	r3, #3
 8000b44:	d017      	beq.n	8000b76 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	68db      	ldr	r3, [r3, #12]
 8000b4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b4c:	69fb      	ldr	r3, [r7, #28]
 8000b4e:	005b      	lsls	r3, r3, #1
 8000b50:	2203      	movs	r2, #3
 8000b52:	fa02 f303 	lsl.w	r3, r2, r3
 8000b56:	43db      	mvns	r3, r3
 8000b58:	69ba      	ldr	r2, [r7, #24]
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	689a      	ldr	r2, [r3, #8]
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	69ba      	ldr	r2, [r7, #24]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	69ba      	ldr	r2, [r7, #24]
 8000b74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	f003 0303 	and.w	r3, r3, #3
 8000b7e:	2b02      	cmp	r3, #2
 8000b80:	d123      	bne.n	8000bca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b82:	69fb      	ldr	r3, [r7, #28]
 8000b84:	08da      	lsrs	r2, r3, #3
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	3208      	adds	r2, #8
 8000b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000b90:	69fb      	ldr	r3, [r7, #28]
 8000b92:	f003 0307 	and.w	r3, r3, #7
 8000b96:	009b      	lsls	r3, r3, #2
 8000b98:	220f      	movs	r2, #15
 8000b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9e:	43db      	mvns	r3, r3
 8000ba0:	69ba      	ldr	r2, [r7, #24]
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	691a      	ldr	r2, [r3, #16]
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	f003 0307 	and.w	r3, r3, #7
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	69ba      	ldr	r2, [r7, #24]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000bbc:	69fb      	ldr	r3, [r7, #28]
 8000bbe:	08da      	lsrs	r2, r3, #3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	3208      	adds	r2, #8
 8000bc4:	69b9      	ldr	r1, [r7, #24]
 8000bc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000bd0:	69fb      	ldr	r3, [r7, #28]
 8000bd2:	005b      	lsls	r3, r3, #1
 8000bd4:	2203      	movs	r2, #3
 8000bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bda:	43db      	mvns	r3, r3
 8000bdc:	69ba      	ldr	r2, [r7, #24]
 8000bde:	4013      	ands	r3, r2
 8000be0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	f003 0203 	and.w	r2, r3, #3
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf2:	69ba      	ldr	r2, [r7, #24]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	69ba      	ldr	r2, [r7, #24]
 8000bfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	f000 80e0 	beq.w	8000dcc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0c:	4b2f      	ldr	r3, [pc, #188]	; (8000ccc <HAL_GPIO_Init+0x238>)
 8000c0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c12:	4a2e      	ldr	r2, [pc, #184]	; (8000ccc <HAL_GPIO_Init+0x238>)
 8000c14:	f043 0302 	orr.w	r3, r3, #2
 8000c18:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c1c:	4b2b      	ldr	r3, [pc, #172]	; (8000ccc <HAL_GPIO_Init+0x238>)
 8000c1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c22:	f003 0302 	and.w	r3, r3, #2
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c2a:	4a29      	ldr	r2, [pc, #164]	; (8000cd0 <HAL_GPIO_Init+0x23c>)
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	089b      	lsrs	r3, r3, #2
 8000c30:	3302      	adds	r3, #2
 8000c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000c38:	69fb      	ldr	r3, [r7, #28]
 8000c3a:	f003 0303 	and.w	r3, r3, #3
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	220f      	movs	r2, #15
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	43db      	mvns	r3, r3
 8000c48:	69ba      	ldr	r2, [r7, #24]
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4a20      	ldr	r2, [pc, #128]	; (8000cd4 <HAL_GPIO_Init+0x240>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d052      	beq.n	8000cfc <HAL_GPIO_Init+0x268>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4a1f      	ldr	r2, [pc, #124]	; (8000cd8 <HAL_GPIO_Init+0x244>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d031      	beq.n	8000cc2 <HAL_GPIO_Init+0x22e>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4a1e      	ldr	r2, [pc, #120]	; (8000cdc <HAL_GPIO_Init+0x248>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d02b      	beq.n	8000cbe <HAL_GPIO_Init+0x22a>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4a1d      	ldr	r2, [pc, #116]	; (8000ce0 <HAL_GPIO_Init+0x24c>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d025      	beq.n	8000cba <HAL_GPIO_Init+0x226>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4a1c      	ldr	r2, [pc, #112]	; (8000ce4 <HAL_GPIO_Init+0x250>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d01f      	beq.n	8000cb6 <HAL_GPIO_Init+0x222>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4a1b      	ldr	r2, [pc, #108]	; (8000ce8 <HAL_GPIO_Init+0x254>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d019      	beq.n	8000cb2 <HAL_GPIO_Init+0x21e>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4a1a      	ldr	r2, [pc, #104]	; (8000cec <HAL_GPIO_Init+0x258>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d013      	beq.n	8000cae <HAL_GPIO_Init+0x21a>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4a19      	ldr	r2, [pc, #100]	; (8000cf0 <HAL_GPIO_Init+0x25c>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d00d      	beq.n	8000caa <HAL_GPIO_Init+0x216>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4a18      	ldr	r2, [pc, #96]	; (8000cf4 <HAL_GPIO_Init+0x260>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d007      	beq.n	8000ca6 <HAL_GPIO_Init+0x212>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4a17      	ldr	r2, [pc, #92]	; (8000cf8 <HAL_GPIO_Init+0x264>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d101      	bne.n	8000ca2 <HAL_GPIO_Init+0x20e>
 8000c9e:	2309      	movs	r3, #9
 8000ca0:	e02d      	b.n	8000cfe <HAL_GPIO_Init+0x26a>
 8000ca2:	230a      	movs	r3, #10
 8000ca4:	e02b      	b.n	8000cfe <HAL_GPIO_Init+0x26a>
 8000ca6:	2308      	movs	r3, #8
 8000ca8:	e029      	b.n	8000cfe <HAL_GPIO_Init+0x26a>
 8000caa:	2307      	movs	r3, #7
 8000cac:	e027      	b.n	8000cfe <HAL_GPIO_Init+0x26a>
 8000cae:	2306      	movs	r3, #6
 8000cb0:	e025      	b.n	8000cfe <HAL_GPIO_Init+0x26a>
 8000cb2:	2305      	movs	r3, #5
 8000cb4:	e023      	b.n	8000cfe <HAL_GPIO_Init+0x26a>
 8000cb6:	2304      	movs	r3, #4
 8000cb8:	e021      	b.n	8000cfe <HAL_GPIO_Init+0x26a>
 8000cba:	2303      	movs	r3, #3
 8000cbc:	e01f      	b.n	8000cfe <HAL_GPIO_Init+0x26a>
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	e01d      	b.n	8000cfe <HAL_GPIO_Init+0x26a>
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e01b      	b.n	8000cfe <HAL_GPIO_Init+0x26a>
 8000cc6:	bf00      	nop
 8000cc8:	58000080 	.word	0x58000080
 8000ccc:	58024400 	.word	0x58024400
 8000cd0:	58000400 	.word	0x58000400
 8000cd4:	58020000 	.word	0x58020000
 8000cd8:	58020400 	.word	0x58020400
 8000cdc:	58020800 	.word	0x58020800
 8000ce0:	58020c00 	.word	0x58020c00
 8000ce4:	58021000 	.word	0x58021000
 8000ce8:	58021400 	.word	0x58021400
 8000cec:	58021800 	.word	0x58021800
 8000cf0:	58021c00 	.word	0x58021c00
 8000cf4:	58022000 	.word	0x58022000
 8000cf8:	58022400 	.word	0x58022400
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	69fa      	ldr	r2, [r7, #28]
 8000d00:	f002 0203 	and.w	r2, r2, #3
 8000d04:	0092      	lsls	r2, r2, #2
 8000d06:	4093      	lsls	r3, r2
 8000d08:	69ba      	ldr	r2, [r7, #24]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d0e:	4938      	ldr	r1, [pc, #224]	; (8000df0 <HAL_GPIO_Init+0x35c>)
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	089b      	lsrs	r3, r3, #2
 8000d14:	3302      	adds	r3, #2
 8000d16:	69ba      	ldr	r2, [r7, #24]
 8000d18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000d24:	693b      	ldr	r3, [r7, #16]
 8000d26:	43db      	mvns	r3, r3
 8000d28:	69ba      	ldr	r2, [r7, #24]
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d003      	beq.n	8000d42 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000d3a:	69ba      	ldr	r2, [r7, #24]
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000d42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d46:	69bb      	ldr	r3, [r7, #24]
 8000d48:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000d4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	43db      	mvns	r3, r3
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d003      	beq.n	8000d70 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000d70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	43db      	mvns	r3, r3
 8000d82:	69ba      	ldr	r2, [r7, #24]
 8000d84:	4013      	ands	r3, r2
 8000d86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d003      	beq.n	8000d9c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	69ba      	ldr	r2, [r7, #24]
 8000da0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	43db      	mvns	r3, r3
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	4013      	ands	r3, r2
 8000db0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d003      	beq.n	8000dc6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	f47f ae63 	bne.w	8000aa8 <HAL_GPIO_Init+0x14>
  }
}
 8000de2:	bf00      	nop
 8000de4:	bf00      	nop
 8000de6:	3724      	adds	r7, #36	; 0x24
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	58000400 	.word	0x58000400

08000df4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	695b      	ldr	r3, [r3, #20]
 8000e04:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e06:	887a      	ldrh	r2, [r7, #2]
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	041a      	lsls	r2, r3, #16
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	43d9      	mvns	r1, r3
 8000e12:	887b      	ldrh	r3, [r7, #2]
 8000e14:	400b      	ands	r3, r1
 8000e16:	431a      	orrs	r2, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	619a      	str	r2, [r3, #24]
}
 8000e1c:	bf00      	nop
 8000e1e:	3714      	adds	r7, #20
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8000e30:	4a08      	ldr	r2, [pc, #32]	; (8000e54 <HAL_HSEM_FastTake+0x2c>)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	3320      	adds	r3, #32
 8000e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e3a:	4a07      	ldr	r2, [pc, #28]	; (8000e58 <HAL_HSEM_FastTake+0x30>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d101      	bne.n	8000e44 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8000e40:	2300      	movs	r3, #0
 8000e42:	e000      	b.n	8000e46 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8000e44:	2301      	movs	r3, #1
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	58026400 	.word	0x58026400
 8000e58:	80000300 	.word	0x80000300

08000e5c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8000e66:	4906      	ldr	r1, [pc, #24]	; (8000e80 <HAL_HSEM_Release+0x24>)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	58026400 	.word	0x58026400

08000e84 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8000e8c:	4b29      	ldr	r3, [pc, #164]	; (8000f34 <HAL_PWREx_ConfigSupply+0xb0>)
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	f003 0307 	and.w	r3, r3, #7
 8000e94:	2b06      	cmp	r3, #6
 8000e96:	d00a      	beq.n	8000eae <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000e98:	4b26      	ldr	r3, [pc, #152]	; (8000f34 <HAL_PWREx_ConfigSupply+0xb0>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	429a      	cmp	r2, r3
 8000ea4:	d001      	beq.n	8000eaa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e040      	b.n	8000f2c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	e03e      	b.n	8000f2c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000eae:	4b21      	ldr	r3, [pc, #132]	; (8000f34 <HAL_PWREx_ConfigSupply+0xb0>)
 8000eb0:	68db      	ldr	r3, [r3, #12]
 8000eb2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8000eb6:	491f      	ldr	r1, [pc, #124]	; (8000f34 <HAL_PWREx_ConfigSupply+0xb0>)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8000ebe:	f7ff fcc9 	bl	8000854 <HAL_GetTick>
 8000ec2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000ec4:	e009      	b.n	8000eda <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000ec6:	f7ff fcc5 	bl	8000854 <HAL_GetTick>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ed4:	d901      	bls.n	8000eda <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e028      	b.n	8000f2c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000eda:	4b16      	ldr	r3, [pc, #88]	; (8000f34 <HAL_PWREx_ConfigSupply+0xb0>)
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ee2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ee6:	d1ee      	bne.n	8000ec6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2b1e      	cmp	r3, #30
 8000eec:	d008      	beq.n	8000f00 <HAL_PWREx_ConfigSupply+0x7c>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2b2e      	cmp	r3, #46	; 0x2e
 8000ef2:	d005      	beq.n	8000f00 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2b1d      	cmp	r3, #29
 8000ef8:	d002      	beq.n	8000f00 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2b2d      	cmp	r3, #45	; 0x2d
 8000efe:	d114      	bne.n	8000f2a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8000f00:	f7ff fca8 	bl	8000854 <HAL_GetTick>
 8000f04:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8000f06:	e009      	b.n	8000f1c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000f08:	f7ff fca4 	bl	8000854 <HAL_GetTick>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f16:	d901      	bls.n	8000f1c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e007      	b.n	8000f2c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8000f1c:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <HAL_PWREx_ConfigSupply+0xb0>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f28:	d1ee      	bne.n	8000f08 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8000f2a:	2300      	movs	r3, #0
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	58024800 	.word	0x58024800

08000f38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08c      	sub	sp, #48	; 0x30
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d102      	bne.n	8000f4c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	f000 bc1d 	b.w	8001786 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f003 0301 	and.w	r3, r3, #1
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	f000 8087 	beq.w	8001068 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f5a:	4b99      	ldr	r3, [pc, #612]	; (80011c0 <HAL_RCC_OscConfig+0x288>)
 8000f5c:	691b      	ldr	r3, [r3, #16]
 8000f5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000f62:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000f64:	4b96      	ldr	r3, [pc, #600]	; (80011c0 <HAL_RCC_OscConfig+0x288>)
 8000f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f68:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f6c:	2b10      	cmp	r3, #16
 8000f6e:	d007      	beq.n	8000f80 <HAL_RCC_OscConfig+0x48>
 8000f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f72:	2b18      	cmp	r3, #24
 8000f74:	d110      	bne.n	8000f98 <HAL_RCC_OscConfig+0x60>
 8000f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f78:	f003 0303 	and.w	r3, r3, #3
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	d10b      	bne.n	8000f98 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f80:	4b8f      	ldr	r3, [pc, #572]	; (80011c0 <HAL_RCC_OscConfig+0x288>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d06c      	beq.n	8001066 <HAL_RCC_OscConfig+0x12e>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d168      	bne.n	8001066 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8000f94:	2301      	movs	r3, #1
 8000f96:	e3f6      	b.n	8001786 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fa0:	d106      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x78>
 8000fa2:	4b87      	ldr	r3, [pc, #540]	; (80011c0 <HAL_RCC_OscConfig+0x288>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a86      	ldr	r2, [pc, #536]	; (80011c0 <HAL_RCC_OscConfig+0x288>)
 8000fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fac:	6013      	str	r3, [r2, #0]
 8000fae:	e02e      	b.n	800100e <HAL_RCC_OscConfig+0xd6>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d10c      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x9a>
 8000fb8:	4b81      	ldr	r3, [pc, #516]	; (80011c0 <HAL_RCC_OscConfig+0x288>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a80      	ldr	r2, [pc, #512]	; (80011c0 <HAL_RCC_OscConfig+0x288>)
 8000fbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fc2:	6013      	str	r3, [r2, #0]
 8000fc4:	4b7e      	ldr	r3, [pc, #504]	; (80011c0 <HAL_RCC_OscConfig+0x288>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a7d      	ldr	r2, [pc, #500]	; (80011c0 <HAL_RCC_OscConfig+0x288>)
 8000fca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fce:	6013      	str	r3, [r2, #0]
 8000fd0:	e01d      	b.n	800100e <HAL_RCC_OscConfig+0xd6>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fda:	d10c      	bne.n	8000ff6 <HAL_RCC_OscConfig+0xbe>
 8000fdc:	4b78      	ldr	r3, [pc, #480]	; (80011c0 <HAL_RCC_OscConfig+0x288>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a77      	ldr	r2, [pc, #476]	; (80011c0 <HAL_RCC_OscConfig+0x288>)
 8000fe2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fe6:	6013      	str	r3, [r2, #0]
 8000fe8:	4b75      	ldr	r3, [pc, #468]	; (80011c0 <HAL_RCC_OscConfig+0x288>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a74      	ldr	r2, [pc, #464]	; (80011c0 <HAL_RCC_OscConfig+0x288>)
 8000fee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ff2:	6013      	str	r3, [r2, #0]
 8000ff4:	e00b      	b.n	800100e <HAL_RCC_OscConfig+0xd6>
 8000ff6:	4b72      	ldr	r3, [pc, #456]	; (80011c0 <HAL_RCC_OscConfig+0x288>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a71      	ldr	r2, [pc, #452]	; (80011c0 <HAL_RCC_OscConfig+0x288>)
 8000ffc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001000:	6013      	str	r3, [r2, #0]
 8001002:	4b6f      	ldr	r3, [pc, #444]	; (80011c0 <HAL_RCC_OscConfig+0x288>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a6e      	ldr	r2, [pc, #440]	; (80011c0 <HAL_RCC_OscConfig+0x288>)
 8001008:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800100c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d013      	beq.n	800103e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001016:	f7ff fc1d 	bl	8000854 <HAL_GetTick>
 800101a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800101c:	e008      	b.n	8001030 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800101e:	f7ff fc19 	bl	8000854 <HAL_GetTick>
 8001022:	4602      	mov	r2, r0
 8001024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	2b64      	cmp	r3, #100	; 0x64
 800102a:	d901      	bls.n	8001030 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800102c:	2303      	movs	r3, #3
 800102e:	e3aa      	b.n	8001786 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001030:	4b63      	ldr	r3, [pc, #396]	; (80011c0 <HAL_RCC_OscConfig+0x288>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001038:	2b00      	cmp	r3, #0
 800103a:	d0f0      	beq.n	800101e <HAL_RCC_OscConfig+0xe6>
 800103c:	e014      	b.n	8001068 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800103e:	f7ff fc09 	bl	8000854 <HAL_GetTick>
 8001042:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001044:	e008      	b.n	8001058 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001046:	f7ff fc05 	bl	8000854 <HAL_GetTick>
 800104a:	4602      	mov	r2, r0
 800104c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	2b64      	cmp	r3, #100	; 0x64
 8001052:	d901      	bls.n	8001058 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001054:	2303      	movs	r3, #3
 8001056:	e396      	b.n	8001786 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001058:	4b59      	ldr	r3, [pc, #356]	; (80011c0 <HAL_RCC_OscConfig+0x288>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001060:	2b00      	cmp	r3, #0
 8001062:	d1f0      	bne.n	8001046 <HAL_RCC_OscConfig+0x10e>
 8001064:	e000      	b.n	8001068 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001066:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0302 	and.w	r3, r3, #2
 8001070:	2b00      	cmp	r3, #0
 8001072:	f000 80cb 	beq.w	800120c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001076:	4b52      	ldr	r3, [pc, #328]	; (80011c0 <HAL_RCC_OscConfig+0x288>)
 8001078:	691b      	ldr	r3, [r3, #16]
 800107a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800107e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001080:	4b4f      	ldr	r3, [pc, #316]	; (80011c0 <HAL_RCC_OscConfig+0x288>)
 8001082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001084:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001086:	6a3b      	ldr	r3, [r7, #32]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d007      	beq.n	800109c <HAL_RCC_OscConfig+0x164>
 800108c:	6a3b      	ldr	r3, [r7, #32]
 800108e:	2b18      	cmp	r3, #24
 8001090:	d156      	bne.n	8001140 <HAL_RCC_OscConfig+0x208>
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	f003 0303 	and.w	r3, r3, #3
 8001098:	2b00      	cmp	r3, #0
 800109a:	d151      	bne.n	8001140 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800109c:	4b48      	ldr	r3, [pc, #288]	; (80011c0 <HAL_RCC_OscConfig+0x288>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 0304 	and.w	r3, r3, #4
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d005      	beq.n	80010b4 <HAL_RCC_OscConfig+0x17c>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d101      	bne.n	80010b4 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80010b0:	2301      	movs	r3, #1
 80010b2:	e368      	b.n	8001786 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80010b4:	4b42      	ldr	r3, [pc, #264]	; (80011c0 <HAL_RCC_OscConfig+0x288>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f023 0219 	bic.w	r2, r3, #25
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	493f      	ldr	r1, [pc, #252]	; (80011c0 <HAL_RCC_OscConfig+0x288>)
 80010c2:	4313      	orrs	r3, r2
 80010c4:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80010c6:	f7ff fbc5 	bl	8000854 <HAL_GetTick>
 80010ca:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80010cc:	e008      	b.n	80010e0 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010ce:	f7ff fbc1 	bl	8000854 <HAL_GetTick>
 80010d2:	4602      	mov	r2, r0
 80010d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d901      	bls.n	80010e0 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80010dc:	2303      	movs	r3, #3
 80010de:	e352      	b.n	8001786 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80010e0:	4b37      	ldr	r3, [pc, #220]	; (80011c0 <HAL_RCC_OscConfig+0x288>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 0304 	and.w	r3, r3, #4
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d0f0      	beq.n	80010ce <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ec:	f7ff fbe2 	bl	80008b4 <HAL_GetREVID>
 80010f0:	4603      	mov	r3, r0
 80010f2:	f241 0203 	movw	r2, #4099	; 0x1003
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d817      	bhi.n	800112a <HAL_RCC_OscConfig+0x1f2>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	691b      	ldr	r3, [r3, #16]
 80010fe:	2b40      	cmp	r3, #64	; 0x40
 8001100:	d108      	bne.n	8001114 <HAL_RCC_OscConfig+0x1dc>
 8001102:	4b2f      	ldr	r3, [pc, #188]	; (80011c0 <HAL_RCC_OscConfig+0x288>)
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800110a:	4a2d      	ldr	r2, [pc, #180]	; (80011c0 <HAL_RCC_OscConfig+0x288>)
 800110c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001110:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001112:	e07b      	b.n	800120c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001114:	4b2a      	ldr	r3, [pc, #168]	; (80011c0 <HAL_RCC_OscConfig+0x288>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	691b      	ldr	r3, [r3, #16]
 8001120:	031b      	lsls	r3, r3, #12
 8001122:	4927      	ldr	r1, [pc, #156]	; (80011c0 <HAL_RCC_OscConfig+0x288>)
 8001124:	4313      	orrs	r3, r2
 8001126:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001128:	e070      	b.n	800120c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800112a:	4b25      	ldr	r3, [pc, #148]	; (80011c0 <HAL_RCC_OscConfig+0x288>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	691b      	ldr	r3, [r3, #16]
 8001136:	061b      	lsls	r3, r3, #24
 8001138:	4921      	ldr	r1, [pc, #132]	; (80011c0 <HAL_RCC_OscConfig+0x288>)
 800113a:	4313      	orrs	r3, r2
 800113c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800113e:	e065      	b.n	800120c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d048      	beq.n	80011da <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001148:	4b1d      	ldr	r3, [pc, #116]	; (80011c0 <HAL_RCC_OscConfig+0x288>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f023 0219 	bic.w	r2, r3, #25
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	491a      	ldr	r1, [pc, #104]	; (80011c0 <HAL_RCC_OscConfig+0x288>)
 8001156:	4313      	orrs	r3, r2
 8001158:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800115a:	f7ff fb7b 	bl	8000854 <HAL_GetTick>
 800115e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001160:	e008      	b.n	8001174 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001162:	f7ff fb77 	bl	8000854 <HAL_GetTick>
 8001166:	4602      	mov	r2, r0
 8001168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	2b02      	cmp	r3, #2
 800116e:	d901      	bls.n	8001174 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8001170:	2303      	movs	r3, #3
 8001172:	e308      	b.n	8001786 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001174:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <HAL_RCC_OscConfig+0x288>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 0304 	and.w	r3, r3, #4
 800117c:	2b00      	cmp	r3, #0
 800117e:	d0f0      	beq.n	8001162 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001180:	f7ff fb98 	bl	80008b4 <HAL_GetREVID>
 8001184:	4603      	mov	r3, r0
 8001186:	f241 0203 	movw	r2, #4099	; 0x1003
 800118a:	4293      	cmp	r3, r2
 800118c:	d81a      	bhi.n	80011c4 <HAL_RCC_OscConfig+0x28c>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	691b      	ldr	r3, [r3, #16]
 8001192:	2b40      	cmp	r3, #64	; 0x40
 8001194:	d108      	bne.n	80011a8 <HAL_RCC_OscConfig+0x270>
 8001196:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <HAL_RCC_OscConfig+0x288>)
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800119e:	4a08      	ldr	r2, [pc, #32]	; (80011c0 <HAL_RCC_OscConfig+0x288>)
 80011a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011a4:	6053      	str	r3, [r2, #4]
 80011a6:	e031      	b.n	800120c <HAL_RCC_OscConfig+0x2d4>
 80011a8:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <HAL_RCC_OscConfig+0x288>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	691b      	ldr	r3, [r3, #16]
 80011b4:	031b      	lsls	r3, r3, #12
 80011b6:	4902      	ldr	r1, [pc, #8]	; (80011c0 <HAL_RCC_OscConfig+0x288>)
 80011b8:	4313      	orrs	r3, r2
 80011ba:	604b      	str	r3, [r1, #4]
 80011bc:	e026      	b.n	800120c <HAL_RCC_OscConfig+0x2d4>
 80011be:	bf00      	nop
 80011c0:	58024400 	.word	0x58024400
 80011c4:	4b9a      	ldr	r3, [pc, #616]	; (8001430 <HAL_RCC_OscConfig+0x4f8>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	691b      	ldr	r3, [r3, #16]
 80011d0:	061b      	lsls	r3, r3, #24
 80011d2:	4997      	ldr	r1, [pc, #604]	; (8001430 <HAL_RCC_OscConfig+0x4f8>)
 80011d4:	4313      	orrs	r3, r2
 80011d6:	604b      	str	r3, [r1, #4]
 80011d8:	e018      	b.n	800120c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011da:	4b95      	ldr	r3, [pc, #596]	; (8001430 <HAL_RCC_OscConfig+0x4f8>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a94      	ldr	r2, [pc, #592]	; (8001430 <HAL_RCC_OscConfig+0x4f8>)
 80011e0:	f023 0301 	bic.w	r3, r3, #1
 80011e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011e6:	f7ff fb35 	bl	8000854 <HAL_GetTick>
 80011ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80011ec:	e008      	b.n	8001200 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011ee:	f7ff fb31 	bl	8000854 <HAL_GetTick>
 80011f2:	4602      	mov	r2, r0
 80011f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d901      	bls.n	8001200 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80011fc:	2303      	movs	r3, #3
 80011fe:	e2c2      	b.n	8001786 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001200:	4b8b      	ldr	r3, [pc, #556]	; (8001430 <HAL_RCC_OscConfig+0x4f8>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 0304 	and.w	r3, r3, #4
 8001208:	2b00      	cmp	r3, #0
 800120a:	d1f0      	bne.n	80011ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0310 	and.w	r3, r3, #16
 8001214:	2b00      	cmp	r3, #0
 8001216:	f000 80a9 	beq.w	800136c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800121a:	4b85      	ldr	r3, [pc, #532]	; (8001430 <HAL_RCC_OscConfig+0x4f8>)
 800121c:	691b      	ldr	r3, [r3, #16]
 800121e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001222:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001224:	4b82      	ldr	r3, [pc, #520]	; (8001430 <HAL_RCC_OscConfig+0x4f8>)
 8001226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001228:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	2b08      	cmp	r3, #8
 800122e:	d007      	beq.n	8001240 <HAL_RCC_OscConfig+0x308>
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	2b18      	cmp	r3, #24
 8001234:	d13a      	bne.n	80012ac <HAL_RCC_OscConfig+0x374>
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	f003 0303 	and.w	r3, r3, #3
 800123c:	2b01      	cmp	r3, #1
 800123e:	d135      	bne.n	80012ac <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001240:	4b7b      	ldr	r3, [pc, #492]	; (8001430 <HAL_RCC_OscConfig+0x4f8>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001248:	2b00      	cmp	r3, #0
 800124a:	d005      	beq.n	8001258 <HAL_RCC_OscConfig+0x320>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	69db      	ldr	r3, [r3, #28]
 8001250:	2b80      	cmp	r3, #128	; 0x80
 8001252:	d001      	beq.n	8001258 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e296      	b.n	8001786 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001258:	f7ff fb2c 	bl	80008b4 <HAL_GetREVID>
 800125c:	4603      	mov	r3, r0
 800125e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001262:	4293      	cmp	r3, r2
 8001264:	d817      	bhi.n	8001296 <HAL_RCC_OscConfig+0x35e>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6a1b      	ldr	r3, [r3, #32]
 800126a:	2b20      	cmp	r3, #32
 800126c:	d108      	bne.n	8001280 <HAL_RCC_OscConfig+0x348>
 800126e:	4b70      	ldr	r3, [pc, #448]	; (8001430 <HAL_RCC_OscConfig+0x4f8>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001276:	4a6e      	ldr	r2, [pc, #440]	; (8001430 <HAL_RCC_OscConfig+0x4f8>)
 8001278:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800127c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800127e:	e075      	b.n	800136c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001280:	4b6b      	ldr	r3, [pc, #428]	; (8001430 <HAL_RCC_OscConfig+0x4f8>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6a1b      	ldr	r3, [r3, #32]
 800128c:	069b      	lsls	r3, r3, #26
 800128e:	4968      	ldr	r1, [pc, #416]	; (8001430 <HAL_RCC_OscConfig+0x4f8>)
 8001290:	4313      	orrs	r3, r2
 8001292:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001294:	e06a      	b.n	800136c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001296:	4b66      	ldr	r3, [pc, #408]	; (8001430 <HAL_RCC_OscConfig+0x4f8>)
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6a1b      	ldr	r3, [r3, #32]
 80012a2:	061b      	lsls	r3, r3, #24
 80012a4:	4962      	ldr	r1, [pc, #392]	; (8001430 <HAL_RCC_OscConfig+0x4f8>)
 80012a6:	4313      	orrs	r3, r2
 80012a8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80012aa:	e05f      	b.n	800136c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	69db      	ldr	r3, [r3, #28]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d042      	beq.n	800133a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80012b4:	4b5e      	ldr	r3, [pc, #376]	; (8001430 <HAL_RCC_OscConfig+0x4f8>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a5d      	ldr	r2, [pc, #372]	; (8001430 <HAL_RCC_OscConfig+0x4f8>)
 80012ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c0:	f7ff fac8 	bl	8000854 <HAL_GetTick>
 80012c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80012c6:	e008      	b.n	80012da <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80012c8:	f7ff fac4 	bl	8000854 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e255      	b.n	8001786 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80012da:	4b55      	ldr	r3, [pc, #340]	; (8001430 <HAL_RCC_OscConfig+0x4f8>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d0f0      	beq.n	80012c8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80012e6:	f7ff fae5 	bl	80008b4 <HAL_GetREVID>
 80012ea:	4603      	mov	r3, r0
 80012ec:	f241 0203 	movw	r2, #4099	; 0x1003
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d817      	bhi.n	8001324 <HAL_RCC_OscConfig+0x3ec>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6a1b      	ldr	r3, [r3, #32]
 80012f8:	2b20      	cmp	r3, #32
 80012fa:	d108      	bne.n	800130e <HAL_RCC_OscConfig+0x3d6>
 80012fc:	4b4c      	ldr	r3, [pc, #304]	; (8001430 <HAL_RCC_OscConfig+0x4f8>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001304:	4a4a      	ldr	r2, [pc, #296]	; (8001430 <HAL_RCC_OscConfig+0x4f8>)
 8001306:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800130a:	6053      	str	r3, [r2, #4]
 800130c:	e02e      	b.n	800136c <HAL_RCC_OscConfig+0x434>
 800130e:	4b48      	ldr	r3, [pc, #288]	; (8001430 <HAL_RCC_OscConfig+0x4f8>)
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6a1b      	ldr	r3, [r3, #32]
 800131a:	069b      	lsls	r3, r3, #26
 800131c:	4944      	ldr	r1, [pc, #272]	; (8001430 <HAL_RCC_OscConfig+0x4f8>)
 800131e:	4313      	orrs	r3, r2
 8001320:	604b      	str	r3, [r1, #4]
 8001322:	e023      	b.n	800136c <HAL_RCC_OscConfig+0x434>
 8001324:	4b42      	ldr	r3, [pc, #264]	; (8001430 <HAL_RCC_OscConfig+0x4f8>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6a1b      	ldr	r3, [r3, #32]
 8001330:	061b      	lsls	r3, r3, #24
 8001332:	493f      	ldr	r1, [pc, #252]	; (8001430 <HAL_RCC_OscConfig+0x4f8>)
 8001334:	4313      	orrs	r3, r2
 8001336:	60cb      	str	r3, [r1, #12]
 8001338:	e018      	b.n	800136c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800133a:	4b3d      	ldr	r3, [pc, #244]	; (8001430 <HAL_RCC_OscConfig+0x4f8>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a3c      	ldr	r2, [pc, #240]	; (8001430 <HAL_RCC_OscConfig+0x4f8>)
 8001340:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001344:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001346:	f7ff fa85 	bl	8000854 <HAL_GetTick>
 800134a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800134c:	e008      	b.n	8001360 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800134e:	f7ff fa81 	bl	8000854 <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d901      	bls.n	8001360 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e212      	b.n	8001786 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001360:	4b33      	ldr	r3, [pc, #204]	; (8001430 <HAL_RCC_OscConfig+0x4f8>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001368:	2b00      	cmp	r3, #0
 800136a:	d1f0      	bne.n	800134e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0308 	and.w	r3, r3, #8
 8001374:	2b00      	cmp	r3, #0
 8001376:	d036      	beq.n	80013e6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	695b      	ldr	r3, [r3, #20]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d019      	beq.n	80013b4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001380:	4b2b      	ldr	r3, [pc, #172]	; (8001430 <HAL_RCC_OscConfig+0x4f8>)
 8001382:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001384:	4a2a      	ldr	r2, [pc, #168]	; (8001430 <HAL_RCC_OscConfig+0x4f8>)
 8001386:	f043 0301 	orr.w	r3, r3, #1
 800138a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800138c:	f7ff fa62 	bl	8000854 <HAL_GetTick>
 8001390:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001392:	e008      	b.n	80013a6 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001394:	f7ff fa5e 	bl	8000854 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e1ef      	b.n	8001786 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80013a6:	4b22      	ldr	r3, [pc, #136]	; (8001430 <HAL_RCC_OscConfig+0x4f8>)
 80013a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d0f0      	beq.n	8001394 <HAL_RCC_OscConfig+0x45c>
 80013b2:	e018      	b.n	80013e6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013b4:	4b1e      	ldr	r3, [pc, #120]	; (8001430 <HAL_RCC_OscConfig+0x4f8>)
 80013b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013b8:	4a1d      	ldr	r2, [pc, #116]	; (8001430 <HAL_RCC_OscConfig+0x4f8>)
 80013ba:	f023 0301 	bic.w	r3, r3, #1
 80013be:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013c0:	f7ff fa48 	bl	8000854 <HAL_GetTick>
 80013c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013c8:	f7ff fa44 	bl	8000854 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e1d5      	b.n	8001786 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80013da:	4b15      	ldr	r3, [pc, #84]	; (8001430 <HAL_RCC_OscConfig+0x4f8>)
 80013dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1f0      	bne.n	80013c8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0320 	and.w	r3, r3, #32
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d039      	beq.n	8001466 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	699b      	ldr	r3, [r3, #24]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d01c      	beq.n	8001434 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80013fa:	4b0d      	ldr	r3, [pc, #52]	; (8001430 <HAL_RCC_OscConfig+0x4f8>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a0c      	ldr	r2, [pc, #48]	; (8001430 <HAL_RCC_OscConfig+0x4f8>)
 8001400:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001404:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001406:	f7ff fa25 	bl	8000854 <HAL_GetTick>
 800140a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800140c:	e008      	b.n	8001420 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800140e:	f7ff fa21 	bl	8000854 <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b02      	cmp	r3, #2
 800141a:	d901      	bls.n	8001420 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e1b2      	b.n	8001786 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001420:	4b03      	ldr	r3, [pc, #12]	; (8001430 <HAL_RCC_OscConfig+0x4f8>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0f0      	beq.n	800140e <HAL_RCC_OscConfig+0x4d6>
 800142c:	e01b      	b.n	8001466 <HAL_RCC_OscConfig+0x52e>
 800142e:	bf00      	nop
 8001430:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001434:	4b9b      	ldr	r3, [pc, #620]	; (80016a4 <HAL_RCC_OscConfig+0x76c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a9a      	ldr	r2, [pc, #616]	; (80016a4 <HAL_RCC_OscConfig+0x76c>)
 800143a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800143e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001440:	f7ff fa08 	bl	8000854 <HAL_GetTick>
 8001444:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001448:	f7ff fa04 	bl	8000854 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b02      	cmp	r3, #2
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e195      	b.n	8001786 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800145a:	4b92      	ldr	r3, [pc, #584]	; (80016a4 <HAL_RCC_OscConfig+0x76c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1f0      	bne.n	8001448 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0304 	and.w	r3, r3, #4
 800146e:	2b00      	cmp	r3, #0
 8001470:	f000 8081 	beq.w	8001576 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001474:	4b8c      	ldr	r3, [pc, #560]	; (80016a8 <HAL_RCC_OscConfig+0x770>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a8b      	ldr	r2, [pc, #556]	; (80016a8 <HAL_RCC_OscConfig+0x770>)
 800147a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800147e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001480:	f7ff f9e8 	bl	8000854 <HAL_GetTick>
 8001484:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001488:	f7ff f9e4 	bl	8000854 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b64      	cmp	r3, #100	; 0x64
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e175      	b.n	8001786 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800149a:	4b83      	ldr	r3, [pc, #524]	; (80016a8 <HAL_RCC_OscConfig+0x770>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d0f0      	beq.n	8001488 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d106      	bne.n	80014bc <HAL_RCC_OscConfig+0x584>
 80014ae:	4b7d      	ldr	r3, [pc, #500]	; (80016a4 <HAL_RCC_OscConfig+0x76c>)
 80014b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014b2:	4a7c      	ldr	r2, [pc, #496]	; (80016a4 <HAL_RCC_OscConfig+0x76c>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	6713      	str	r3, [r2, #112]	; 0x70
 80014ba:	e02d      	b.n	8001518 <HAL_RCC_OscConfig+0x5e0>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d10c      	bne.n	80014de <HAL_RCC_OscConfig+0x5a6>
 80014c4:	4b77      	ldr	r3, [pc, #476]	; (80016a4 <HAL_RCC_OscConfig+0x76c>)
 80014c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c8:	4a76      	ldr	r2, [pc, #472]	; (80016a4 <HAL_RCC_OscConfig+0x76c>)
 80014ca:	f023 0301 	bic.w	r3, r3, #1
 80014ce:	6713      	str	r3, [r2, #112]	; 0x70
 80014d0:	4b74      	ldr	r3, [pc, #464]	; (80016a4 <HAL_RCC_OscConfig+0x76c>)
 80014d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d4:	4a73      	ldr	r2, [pc, #460]	; (80016a4 <HAL_RCC_OscConfig+0x76c>)
 80014d6:	f023 0304 	bic.w	r3, r3, #4
 80014da:	6713      	str	r3, [r2, #112]	; 0x70
 80014dc:	e01c      	b.n	8001518 <HAL_RCC_OscConfig+0x5e0>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	2b05      	cmp	r3, #5
 80014e4:	d10c      	bne.n	8001500 <HAL_RCC_OscConfig+0x5c8>
 80014e6:	4b6f      	ldr	r3, [pc, #444]	; (80016a4 <HAL_RCC_OscConfig+0x76c>)
 80014e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ea:	4a6e      	ldr	r2, [pc, #440]	; (80016a4 <HAL_RCC_OscConfig+0x76c>)
 80014ec:	f043 0304 	orr.w	r3, r3, #4
 80014f0:	6713      	str	r3, [r2, #112]	; 0x70
 80014f2:	4b6c      	ldr	r3, [pc, #432]	; (80016a4 <HAL_RCC_OscConfig+0x76c>)
 80014f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f6:	4a6b      	ldr	r2, [pc, #428]	; (80016a4 <HAL_RCC_OscConfig+0x76c>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	6713      	str	r3, [r2, #112]	; 0x70
 80014fe:	e00b      	b.n	8001518 <HAL_RCC_OscConfig+0x5e0>
 8001500:	4b68      	ldr	r3, [pc, #416]	; (80016a4 <HAL_RCC_OscConfig+0x76c>)
 8001502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001504:	4a67      	ldr	r2, [pc, #412]	; (80016a4 <HAL_RCC_OscConfig+0x76c>)
 8001506:	f023 0301 	bic.w	r3, r3, #1
 800150a:	6713      	str	r3, [r2, #112]	; 0x70
 800150c:	4b65      	ldr	r3, [pc, #404]	; (80016a4 <HAL_RCC_OscConfig+0x76c>)
 800150e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001510:	4a64      	ldr	r2, [pc, #400]	; (80016a4 <HAL_RCC_OscConfig+0x76c>)
 8001512:	f023 0304 	bic.w	r3, r3, #4
 8001516:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d015      	beq.n	800154c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001520:	f7ff f998 	bl	8000854 <HAL_GetTick>
 8001524:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001526:	e00a      	b.n	800153e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001528:	f7ff f994 	bl	8000854 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	f241 3288 	movw	r2, #5000	; 0x1388
 8001536:	4293      	cmp	r3, r2
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e123      	b.n	8001786 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800153e:	4b59      	ldr	r3, [pc, #356]	; (80016a4 <HAL_RCC_OscConfig+0x76c>)
 8001540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d0ee      	beq.n	8001528 <HAL_RCC_OscConfig+0x5f0>
 800154a:	e014      	b.n	8001576 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800154c:	f7ff f982 	bl	8000854 <HAL_GetTick>
 8001550:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001552:	e00a      	b.n	800156a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001554:	f7ff f97e 	bl	8000854 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001562:	4293      	cmp	r3, r2
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e10d      	b.n	8001786 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800156a:	4b4e      	ldr	r3, [pc, #312]	; (80016a4 <HAL_RCC_OscConfig+0x76c>)
 800156c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1ee      	bne.n	8001554 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157a:	2b00      	cmp	r3, #0
 800157c:	f000 8102 	beq.w	8001784 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001580:	4b48      	ldr	r3, [pc, #288]	; (80016a4 <HAL_RCC_OscConfig+0x76c>)
 8001582:	691b      	ldr	r3, [r3, #16]
 8001584:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001588:	2b18      	cmp	r3, #24
 800158a:	f000 80bd 	beq.w	8001708 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001592:	2b02      	cmp	r3, #2
 8001594:	f040 809e 	bne.w	80016d4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001598:	4b42      	ldr	r3, [pc, #264]	; (80016a4 <HAL_RCC_OscConfig+0x76c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a41      	ldr	r2, [pc, #260]	; (80016a4 <HAL_RCC_OscConfig+0x76c>)
 800159e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a4:	f7ff f956 	bl	8000854 <HAL_GetTick>
 80015a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ac:	f7ff f952 	bl	8000854 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e0e3      	b.n	8001786 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80015be:	4b39      	ldr	r3, [pc, #228]	; (80016a4 <HAL_RCC_OscConfig+0x76c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1f0      	bne.n	80015ac <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015ca:	4b36      	ldr	r3, [pc, #216]	; (80016a4 <HAL_RCC_OscConfig+0x76c>)
 80015cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015ce:	4b37      	ldr	r3, [pc, #220]	; (80016ac <HAL_RCC_OscConfig+0x774>)
 80015d0:	4013      	ands	r3, r2
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80015da:	0112      	lsls	r2, r2, #4
 80015dc:	430a      	orrs	r2, r1
 80015de:	4931      	ldr	r1, [pc, #196]	; (80016a4 <HAL_RCC_OscConfig+0x76c>)
 80015e0:	4313      	orrs	r3, r2
 80015e2:	628b      	str	r3, [r1, #40]	; 0x28
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e8:	3b01      	subs	r3, #1
 80015ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015f2:	3b01      	subs	r3, #1
 80015f4:	025b      	lsls	r3, r3, #9
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	431a      	orrs	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015fe:	3b01      	subs	r3, #1
 8001600:	041b      	lsls	r3, r3, #16
 8001602:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001606:	431a      	orrs	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800160c:	3b01      	subs	r3, #1
 800160e:	061b      	lsls	r3, r3, #24
 8001610:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001614:	4923      	ldr	r1, [pc, #140]	; (80016a4 <HAL_RCC_OscConfig+0x76c>)
 8001616:	4313      	orrs	r3, r2
 8001618:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800161a:	4b22      	ldr	r3, [pc, #136]	; (80016a4 <HAL_RCC_OscConfig+0x76c>)
 800161c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800161e:	4a21      	ldr	r2, [pc, #132]	; (80016a4 <HAL_RCC_OscConfig+0x76c>)
 8001620:	f023 0301 	bic.w	r3, r3, #1
 8001624:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001626:	4b1f      	ldr	r3, [pc, #124]	; (80016a4 <HAL_RCC_OscConfig+0x76c>)
 8001628:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800162a:	4b21      	ldr	r3, [pc, #132]	; (80016b0 <HAL_RCC_OscConfig+0x778>)
 800162c:	4013      	ands	r3, r2
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001632:	00d2      	lsls	r2, r2, #3
 8001634:	491b      	ldr	r1, [pc, #108]	; (80016a4 <HAL_RCC_OscConfig+0x76c>)
 8001636:	4313      	orrs	r3, r2
 8001638:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800163a:	4b1a      	ldr	r3, [pc, #104]	; (80016a4 <HAL_RCC_OscConfig+0x76c>)
 800163c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163e:	f023 020c 	bic.w	r2, r3, #12
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	4917      	ldr	r1, [pc, #92]	; (80016a4 <HAL_RCC_OscConfig+0x76c>)
 8001648:	4313      	orrs	r3, r2
 800164a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800164c:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <HAL_RCC_OscConfig+0x76c>)
 800164e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001650:	f023 0202 	bic.w	r2, r3, #2
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001658:	4912      	ldr	r1, [pc, #72]	; (80016a4 <HAL_RCC_OscConfig+0x76c>)
 800165a:	4313      	orrs	r3, r2
 800165c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800165e:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <HAL_RCC_OscConfig+0x76c>)
 8001660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001662:	4a10      	ldr	r2, [pc, #64]	; (80016a4 <HAL_RCC_OscConfig+0x76c>)
 8001664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001668:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800166a:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <HAL_RCC_OscConfig+0x76c>)
 800166c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166e:	4a0d      	ldr	r2, [pc, #52]	; (80016a4 <HAL_RCC_OscConfig+0x76c>)
 8001670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001674:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001676:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <HAL_RCC_OscConfig+0x76c>)
 8001678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800167a:	4a0a      	ldr	r2, [pc, #40]	; (80016a4 <HAL_RCC_OscConfig+0x76c>)
 800167c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001680:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001682:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <HAL_RCC_OscConfig+0x76c>)
 8001684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001686:	4a07      	ldr	r2, [pc, #28]	; (80016a4 <HAL_RCC_OscConfig+0x76c>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800168e:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <HAL_RCC_OscConfig+0x76c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a04      	ldr	r2, [pc, #16]	; (80016a4 <HAL_RCC_OscConfig+0x76c>)
 8001694:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001698:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800169a:	f7ff f8db 	bl	8000854 <HAL_GetTick>
 800169e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80016a0:	e011      	b.n	80016c6 <HAL_RCC_OscConfig+0x78e>
 80016a2:	bf00      	nop
 80016a4:	58024400 	.word	0x58024400
 80016a8:	58024800 	.word	0x58024800
 80016ac:	fffffc0c 	.word	0xfffffc0c
 80016b0:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016b4:	f7ff f8ce 	bl	8000854 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e05f      	b.n	8001786 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80016c6:	4b32      	ldr	r3, [pc, #200]	; (8001790 <HAL_RCC_OscConfig+0x858>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d0f0      	beq.n	80016b4 <HAL_RCC_OscConfig+0x77c>
 80016d2:	e057      	b.n	8001784 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016d4:	4b2e      	ldr	r3, [pc, #184]	; (8001790 <HAL_RCC_OscConfig+0x858>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a2d      	ldr	r2, [pc, #180]	; (8001790 <HAL_RCC_OscConfig+0x858>)
 80016da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e0:	f7ff f8b8 	bl	8000854 <HAL_GetTick>
 80016e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016e8:	f7ff f8b4 	bl	8000854 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e045      	b.n	8001786 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80016fa:	4b25      	ldr	r3, [pc, #148]	; (8001790 <HAL_RCC_OscConfig+0x858>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1f0      	bne.n	80016e8 <HAL_RCC_OscConfig+0x7b0>
 8001706:	e03d      	b.n	8001784 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001708:	4b21      	ldr	r3, [pc, #132]	; (8001790 <HAL_RCC_OscConfig+0x858>)
 800170a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800170e:	4b20      	ldr	r3, [pc, #128]	; (8001790 <HAL_RCC_OscConfig+0x858>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001718:	2b01      	cmp	r3, #1
 800171a:	d031      	beq.n	8001780 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	f003 0203 	and.w	r2, r3, #3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001726:	429a      	cmp	r2, r3
 8001728:	d12a      	bne.n	8001780 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	091b      	lsrs	r3, r3, #4
 800172e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001736:	429a      	cmp	r2, r3
 8001738:	d122      	bne.n	8001780 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001744:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001746:	429a      	cmp	r2, r3
 8001748:	d11a      	bne.n	8001780 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	0a5b      	lsrs	r3, r3, #9
 800174e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001756:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001758:	429a      	cmp	r2, r3
 800175a:	d111      	bne.n	8001780 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	0c1b      	lsrs	r3, r3, #16
 8001760:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001768:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800176a:	429a      	cmp	r2, r3
 800176c:	d108      	bne.n	8001780 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	0e1b      	lsrs	r3, r3, #24
 8001772:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800177a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800177c:	429a      	cmp	r2, r3
 800177e:	d001      	beq.n	8001784 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e000      	b.n	8001786 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3730      	adds	r7, #48	; 0x30
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	58024400 	.word	0x58024400

08001794 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d101      	bne.n	80017a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e19c      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017a8:	4b8a      	ldr	r3, [pc, #552]	; (80019d4 <HAL_RCC_ClockConfig+0x240>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 030f 	and.w	r3, r3, #15
 80017b0:	683a      	ldr	r2, [r7, #0]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d910      	bls.n	80017d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017b6:	4b87      	ldr	r3, [pc, #540]	; (80019d4 <HAL_RCC_ClockConfig+0x240>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f023 020f 	bic.w	r2, r3, #15
 80017be:	4985      	ldr	r1, [pc, #532]	; (80019d4 <HAL_RCC_ClockConfig+0x240>)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017c6:	4b83      	ldr	r3, [pc, #524]	; (80019d4 <HAL_RCC_ClockConfig+0x240>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 030f 	and.w	r3, r3, #15
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d001      	beq.n	80017d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e184      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0304 	and.w	r3, r3, #4
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d010      	beq.n	8001806 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	691a      	ldr	r2, [r3, #16]
 80017e8:	4b7b      	ldr	r3, [pc, #492]	; (80019d8 <HAL_RCC_ClockConfig+0x244>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d908      	bls.n	8001806 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80017f4:	4b78      	ldr	r3, [pc, #480]	; (80019d8 <HAL_RCC_ClockConfig+0x244>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	691b      	ldr	r3, [r3, #16]
 8001800:	4975      	ldr	r1, [pc, #468]	; (80019d8 <HAL_RCC_ClockConfig+0x244>)
 8001802:	4313      	orrs	r3, r2
 8001804:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0308 	and.w	r3, r3, #8
 800180e:	2b00      	cmp	r3, #0
 8001810:	d010      	beq.n	8001834 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	695a      	ldr	r2, [r3, #20]
 8001816:	4b70      	ldr	r3, [pc, #448]	; (80019d8 <HAL_RCC_ClockConfig+0x244>)
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800181e:	429a      	cmp	r2, r3
 8001820:	d908      	bls.n	8001834 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001822:	4b6d      	ldr	r3, [pc, #436]	; (80019d8 <HAL_RCC_ClockConfig+0x244>)
 8001824:	69db      	ldr	r3, [r3, #28]
 8001826:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	496a      	ldr	r1, [pc, #424]	; (80019d8 <HAL_RCC_ClockConfig+0x244>)
 8001830:	4313      	orrs	r3, r2
 8001832:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0310 	and.w	r3, r3, #16
 800183c:	2b00      	cmp	r3, #0
 800183e:	d010      	beq.n	8001862 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	699a      	ldr	r2, [r3, #24]
 8001844:	4b64      	ldr	r3, [pc, #400]	; (80019d8 <HAL_RCC_ClockConfig+0x244>)
 8001846:	69db      	ldr	r3, [r3, #28]
 8001848:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800184c:	429a      	cmp	r2, r3
 800184e:	d908      	bls.n	8001862 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001850:	4b61      	ldr	r3, [pc, #388]	; (80019d8 <HAL_RCC_ClockConfig+0x244>)
 8001852:	69db      	ldr	r3, [r3, #28]
 8001854:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	495e      	ldr	r1, [pc, #376]	; (80019d8 <HAL_RCC_ClockConfig+0x244>)
 800185e:	4313      	orrs	r3, r2
 8001860:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0320 	and.w	r3, r3, #32
 800186a:	2b00      	cmp	r3, #0
 800186c:	d010      	beq.n	8001890 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	69da      	ldr	r2, [r3, #28]
 8001872:	4b59      	ldr	r3, [pc, #356]	; (80019d8 <HAL_RCC_ClockConfig+0x244>)
 8001874:	6a1b      	ldr	r3, [r3, #32]
 8001876:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800187a:	429a      	cmp	r2, r3
 800187c:	d908      	bls.n	8001890 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800187e:	4b56      	ldr	r3, [pc, #344]	; (80019d8 <HAL_RCC_ClockConfig+0x244>)
 8001880:	6a1b      	ldr	r3, [r3, #32]
 8001882:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	4953      	ldr	r1, [pc, #332]	; (80019d8 <HAL_RCC_ClockConfig+0x244>)
 800188c:	4313      	orrs	r3, r2
 800188e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d010      	beq.n	80018be <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	68da      	ldr	r2, [r3, #12]
 80018a0:	4b4d      	ldr	r3, [pc, #308]	; (80019d8 <HAL_RCC_ClockConfig+0x244>)
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	f003 030f 	and.w	r3, r3, #15
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d908      	bls.n	80018be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018ac:	4b4a      	ldr	r3, [pc, #296]	; (80019d8 <HAL_RCC_ClockConfig+0x244>)
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	f023 020f 	bic.w	r2, r3, #15
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	4947      	ldr	r1, [pc, #284]	; (80019d8 <HAL_RCC_ClockConfig+0x244>)
 80018ba:	4313      	orrs	r3, r2
 80018bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d055      	beq.n	8001976 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80018ca:	4b43      	ldr	r3, [pc, #268]	; (80019d8 <HAL_RCC_ClockConfig+0x244>)
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	4940      	ldr	r1, [pc, #256]	; (80019d8 <HAL_RCC_ClockConfig+0x244>)
 80018d8:	4313      	orrs	r3, r2
 80018da:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d107      	bne.n	80018f4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018e4:	4b3c      	ldr	r3, [pc, #240]	; (80019d8 <HAL_RCC_ClockConfig+0x244>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d121      	bne.n	8001934 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e0f6      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	2b03      	cmp	r3, #3
 80018fa:	d107      	bne.n	800190c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80018fc:	4b36      	ldr	r3, [pc, #216]	; (80019d8 <HAL_RCC_ClockConfig+0x244>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d115      	bne.n	8001934 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e0ea      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d107      	bne.n	8001924 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001914:	4b30      	ldr	r3, [pc, #192]	; (80019d8 <HAL_RCC_ClockConfig+0x244>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800191c:	2b00      	cmp	r3, #0
 800191e:	d109      	bne.n	8001934 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e0de      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001924:	4b2c      	ldr	r3, [pc, #176]	; (80019d8 <HAL_RCC_ClockConfig+0x244>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0304 	and.w	r3, r3, #4
 800192c:	2b00      	cmp	r3, #0
 800192e:	d101      	bne.n	8001934 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e0d6      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001934:	4b28      	ldr	r3, [pc, #160]	; (80019d8 <HAL_RCC_ClockConfig+0x244>)
 8001936:	691b      	ldr	r3, [r3, #16]
 8001938:	f023 0207 	bic.w	r2, r3, #7
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	4925      	ldr	r1, [pc, #148]	; (80019d8 <HAL_RCC_ClockConfig+0x244>)
 8001942:	4313      	orrs	r3, r2
 8001944:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001946:	f7fe ff85 	bl	8000854 <HAL_GetTick>
 800194a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800194c:	e00a      	b.n	8001964 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800194e:	f7fe ff81 	bl	8000854 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	f241 3288 	movw	r2, #5000	; 0x1388
 800195c:	4293      	cmp	r3, r2
 800195e:	d901      	bls.n	8001964 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e0be      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001964:	4b1c      	ldr	r3, [pc, #112]	; (80019d8 <HAL_RCC_ClockConfig+0x244>)
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	429a      	cmp	r2, r3
 8001974:	d1eb      	bne.n	800194e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d010      	beq.n	80019a4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	68da      	ldr	r2, [r3, #12]
 8001986:	4b14      	ldr	r3, [pc, #80]	; (80019d8 <HAL_RCC_ClockConfig+0x244>)
 8001988:	699b      	ldr	r3, [r3, #24]
 800198a:	f003 030f 	and.w	r3, r3, #15
 800198e:	429a      	cmp	r2, r3
 8001990:	d208      	bcs.n	80019a4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001992:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <HAL_RCC_ClockConfig+0x244>)
 8001994:	699b      	ldr	r3, [r3, #24]
 8001996:	f023 020f 	bic.w	r2, r3, #15
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	490e      	ldr	r1, [pc, #56]	; (80019d8 <HAL_RCC_ClockConfig+0x244>)
 80019a0:	4313      	orrs	r3, r2
 80019a2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019a4:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <HAL_RCC_ClockConfig+0x240>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 030f 	and.w	r3, r3, #15
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d214      	bcs.n	80019dc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019b2:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <HAL_RCC_ClockConfig+0x240>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f023 020f 	bic.w	r2, r3, #15
 80019ba:	4906      	ldr	r1, [pc, #24]	; (80019d4 <HAL_RCC_ClockConfig+0x240>)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	4313      	orrs	r3, r2
 80019c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019c2:	4b04      	ldr	r3, [pc, #16]	; (80019d4 <HAL_RCC_ClockConfig+0x240>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 030f 	and.w	r3, r3, #15
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d005      	beq.n	80019dc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e086      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x34e>
 80019d4:	52002000 	.word	0x52002000
 80019d8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0304 	and.w	r3, r3, #4
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d010      	beq.n	8001a0a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	691a      	ldr	r2, [r3, #16]
 80019ec:	4b3f      	ldr	r3, [pc, #252]	; (8001aec <HAL_RCC_ClockConfig+0x358>)
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d208      	bcs.n	8001a0a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80019f8:	4b3c      	ldr	r3, [pc, #240]	; (8001aec <HAL_RCC_ClockConfig+0x358>)
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	4939      	ldr	r1, [pc, #228]	; (8001aec <HAL_RCC_ClockConfig+0x358>)
 8001a06:	4313      	orrs	r3, r2
 8001a08:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0308 	and.w	r3, r3, #8
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d010      	beq.n	8001a38 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	695a      	ldr	r2, [r3, #20]
 8001a1a:	4b34      	ldr	r3, [pc, #208]	; (8001aec <HAL_RCC_ClockConfig+0x358>)
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d208      	bcs.n	8001a38 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001a26:	4b31      	ldr	r3, [pc, #196]	; (8001aec <HAL_RCC_ClockConfig+0x358>)
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	695b      	ldr	r3, [r3, #20]
 8001a32:	492e      	ldr	r1, [pc, #184]	; (8001aec <HAL_RCC_ClockConfig+0x358>)
 8001a34:	4313      	orrs	r3, r2
 8001a36:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0310 	and.w	r3, r3, #16
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d010      	beq.n	8001a66 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	699a      	ldr	r2, [r3, #24]
 8001a48:	4b28      	ldr	r3, [pc, #160]	; (8001aec <HAL_RCC_ClockConfig+0x358>)
 8001a4a:	69db      	ldr	r3, [r3, #28]
 8001a4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d208      	bcs.n	8001a66 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001a54:	4b25      	ldr	r3, [pc, #148]	; (8001aec <HAL_RCC_ClockConfig+0x358>)
 8001a56:	69db      	ldr	r3, [r3, #28]
 8001a58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	4922      	ldr	r1, [pc, #136]	; (8001aec <HAL_RCC_ClockConfig+0x358>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0320 	and.w	r3, r3, #32
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d010      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	69da      	ldr	r2, [r3, #28]
 8001a76:	4b1d      	ldr	r3, [pc, #116]	; (8001aec <HAL_RCC_ClockConfig+0x358>)
 8001a78:	6a1b      	ldr	r3, [r3, #32]
 8001a7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d208      	bcs.n	8001a94 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001a82:	4b1a      	ldr	r3, [pc, #104]	; (8001aec <HAL_RCC_ClockConfig+0x358>)
 8001a84:	6a1b      	ldr	r3, [r3, #32]
 8001a86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	4917      	ldr	r1, [pc, #92]	; (8001aec <HAL_RCC_ClockConfig+0x358>)
 8001a90:	4313      	orrs	r3, r2
 8001a92:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a94:	f000 f834 	bl	8001b00 <HAL_RCC_GetSysClockFreq>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	4b14      	ldr	r3, [pc, #80]	; (8001aec <HAL_RCC_ClockConfig+0x358>)
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	0a1b      	lsrs	r3, r3, #8
 8001aa0:	f003 030f 	and.w	r3, r3, #15
 8001aa4:	4912      	ldr	r1, [pc, #72]	; (8001af0 <HAL_RCC_ClockConfig+0x35c>)
 8001aa6:	5ccb      	ldrb	r3, [r1, r3]
 8001aa8:	f003 031f 	and.w	r3, r3, #31
 8001aac:	fa22 f303 	lsr.w	r3, r2, r3
 8001ab0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ab2:	4b0e      	ldr	r3, [pc, #56]	; (8001aec <HAL_RCC_ClockConfig+0x358>)
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	f003 030f 	and.w	r3, r3, #15
 8001aba:	4a0d      	ldr	r2, [pc, #52]	; (8001af0 <HAL_RCC_ClockConfig+0x35c>)
 8001abc:	5cd3      	ldrb	r3, [r2, r3]
 8001abe:	f003 031f 	and.w	r3, r3, #31
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ac8:	4a0a      	ldr	r2, [pc, #40]	; (8001af4 <HAL_RCC_ClockConfig+0x360>)
 8001aca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001acc:	4a0a      	ldr	r2, [pc, #40]	; (8001af8 <HAL_RCC_ClockConfig+0x364>)
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001ad2:	4b0a      	ldr	r3, [pc, #40]	; (8001afc <HAL_RCC_ClockConfig+0x368>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7fe fe72 	bl	80007c0 <HAL_InitTick>
 8001adc:	4603      	mov	r3, r0
 8001ade:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3718      	adds	r7, #24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	58024400 	.word	0x58024400
 8001af0:	08001e64 	.word	0x08001e64
 8001af4:	24000004 	.word	0x24000004
 8001af8:	24000000 	.word	0x24000000
 8001afc:	24000008 	.word	0x24000008

08001b00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b089      	sub	sp, #36	; 0x24
 8001b04:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b06:	4bb3      	ldr	r3, [pc, #716]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b0e:	2b18      	cmp	r3, #24
 8001b10:	f200 8155 	bhi.w	8001dbe <HAL_RCC_GetSysClockFreq+0x2be>
 8001b14:	a201      	add	r2, pc, #4	; (adr r2, 8001b1c <HAL_RCC_GetSysClockFreq+0x1c>)
 8001b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b1a:	bf00      	nop
 8001b1c:	08001b81 	.word	0x08001b81
 8001b20:	08001dbf 	.word	0x08001dbf
 8001b24:	08001dbf 	.word	0x08001dbf
 8001b28:	08001dbf 	.word	0x08001dbf
 8001b2c:	08001dbf 	.word	0x08001dbf
 8001b30:	08001dbf 	.word	0x08001dbf
 8001b34:	08001dbf 	.word	0x08001dbf
 8001b38:	08001dbf 	.word	0x08001dbf
 8001b3c:	08001ba7 	.word	0x08001ba7
 8001b40:	08001dbf 	.word	0x08001dbf
 8001b44:	08001dbf 	.word	0x08001dbf
 8001b48:	08001dbf 	.word	0x08001dbf
 8001b4c:	08001dbf 	.word	0x08001dbf
 8001b50:	08001dbf 	.word	0x08001dbf
 8001b54:	08001dbf 	.word	0x08001dbf
 8001b58:	08001dbf 	.word	0x08001dbf
 8001b5c:	08001bad 	.word	0x08001bad
 8001b60:	08001dbf 	.word	0x08001dbf
 8001b64:	08001dbf 	.word	0x08001dbf
 8001b68:	08001dbf 	.word	0x08001dbf
 8001b6c:	08001dbf 	.word	0x08001dbf
 8001b70:	08001dbf 	.word	0x08001dbf
 8001b74:	08001dbf 	.word	0x08001dbf
 8001b78:	08001dbf 	.word	0x08001dbf
 8001b7c:	08001bb3 	.word	0x08001bb3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001b80:	4b94      	ldr	r3, [pc, #592]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0320 	and.w	r3, r3, #32
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d009      	beq.n	8001ba0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001b8c:	4b91      	ldr	r3, [pc, #580]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	08db      	lsrs	r3, r3, #3
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	4a90      	ldr	r2, [pc, #576]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001b98:	fa22 f303 	lsr.w	r3, r2, r3
 8001b9c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001b9e:	e111      	b.n	8001dc4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001ba0:	4b8d      	ldr	r3, [pc, #564]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001ba2:	61bb      	str	r3, [r7, #24]
    break;
 8001ba4:	e10e      	b.n	8001dc4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001ba6:	4b8d      	ldr	r3, [pc, #564]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001ba8:	61bb      	str	r3, [r7, #24]
    break;
 8001baa:	e10b      	b.n	8001dc4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001bac:	4b8c      	ldr	r3, [pc, #560]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001bae:	61bb      	str	r3, [r7, #24]
    break;
 8001bb0:	e108      	b.n	8001dc4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001bb2:	4b88      	ldr	r3, [pc, #544]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb6:	f003 0303 	and.w	r3, r3, #3
 8001bba:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001bbc:	4b85      	ldr	r3, [pc, #532]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc0:	091b      	lsrs	r3, r3, #4
 8001bc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bc6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001bc8:	4b82      	ldr	r3, [pc, #520]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001bd2:	4b80      	ldr	r3, [pc, #512]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bd6:	08db      	lsrs	r3, r3, #3
 8001bd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001bdc:	68fa      	ldr	r2, [r7, #12]
 8001bde:	fb02 f303 	mul.w	r3, r2, r3
 8001be2:	ee07 3a90 	vmov	s15, r3
 8001be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bea:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f000 80e1 	beq.w	8001db8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	f000 8083 	beq.w	8001d04 <HAL_RCC_GetSysClockFreq+0x204>
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	f200 80a1 	bhi.w	8001d48 <HAL_RCC_GetSysClockFreq+0x248>
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d003      	beq.n	8001c14 <HAL_RCC_GetSysClockFreq+0x114>
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d056      	beq.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001c12:	e099      	b.n	8001d48 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001c14:	4b6f      	ldr	r3, [pc, #444]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0320 	and.w	r3, r3, #32
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d02d      	beq.n	8001c7c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001c20:	4b6c      	ldr	r3, [pc, #432]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	08db      	lsrs	r3, r3, #3
 8001c26:	f003 0303 	and.w	r3, r3, #3
 8001c2a:	4a6b      	ldr	r2, [pc, #428]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c30:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	ee07 3a90 	vmov	s15, r3
 8001c38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	ee07 3a90 	vmov	s15, r3
 8001c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c4a:	4b62      	ldr	r3, [pc, #392]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c52:	ee07 3a90 	vmov	s15, r3
 8001c56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001c5e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8001de4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001c62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001c66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001c6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001c6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c76:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8001c7a:	e087      	b.n	8001d8c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	ee07 3a90 	vmov	s15, r3
 8001c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c86:	eddf 6a58 	vldr	s13, [pc, #352]	; 8001de8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001c8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c8e:	4b51      	ldr	r3, [pc, #324]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c96:	ee07 3a90 	vmov	s15, r3
 8001c9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ca2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8001de4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001ca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001caa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001cae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001cb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001cbe:	e065      	b.n	8001d8c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	ee07 3a90 	vmov	s15, r3
 8001cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cca:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001dec <HAL_RCC_GetSysClockFreq+0x2ec>
 8001cce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001cd2:	4b40      	ldr	r3, [pc, #256]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cda:	ee07 3a90 	vmov	s15, r3
 8001cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ce2:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ce6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8001de4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001cea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001cee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001cf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001cf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001d02:	e043      	b.n	8001d8c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	ee07 3a90 	vmov	s15, r3
 8001d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d0e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001df0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d16:	4b2f      	ldr	r3, [pc, #188]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d1e:	ee07 3a90 	vmov	s15, r3
 8001d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d26:	ed97 6a02 	vldr	s12, [r7, #8]
 8001d2a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8001de4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001d2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001d32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001d46:	e021      	b.n	8001d8c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	ee07 3a90 	vmov	s15, r3
 8001d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d52:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001dec <HAL_RCC_GetSysClockFreq+0x2ec>
 8001d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d5a:	4b1e      	ldr	r3, [pc, #120]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d62:	ee07 3a90 	vmov	s15, r3
 8001d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001d6e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8001de4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001d72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001d76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001d8a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001d8c:	4b11      	ldr	r3, [pc, #68]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d90:	0a5b      	lsrs	r3, r3, #9
 8001d92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d96:	3301      	adds	r3, #1
 8001d98:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	ee07 3a90 	vmov	s15, r3
 8001da0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001da4:	edd7 6a07 	vldr	s13, [r7, #28]
 8001da8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001db0:	ee17 3a90 	vmov	r3, s15
 8001db4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8001db6:	e005      	b.n	8001dc4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8001db8:	2300      	movs	r3, #0
 8001dba:	61bb      	str	r3, [r7, #24]
    break;
 8001dbc:	e002      	b.n	8001dc4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8001dbe:	4b07      	ldr	r3, [pc, #28]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001dc0:	61bb      	str	r3, [r7, #24]
    break;
 8001dc2:	bf00      	nop
  }

  return sysclockfreq;
 8001dc4:	69bb      	ldr	r3, [r7, #24]
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3724      	adds	r7, #36	; 0x24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	58024400 	.word	0x58024400
 8001dd8:	03d09000 	.word	0x03d09000
 8001ddc:	003d0900 	.word	0x003d0900
 8001de0:	017d7840 	.word	0x017d7840
 8001de4:	46000000 	.word	0x46000000
 8001de8:	4c742400 	.word	0x4c742400
 8001dec:	4a742400 	.word	0x4a742400
 8001df0:	4bbebc20 	.word	0x4bbebc20

08001df4 <__libc_init_array>:
 8001df4:	b570      	push	{r4, r5, r6, lr}
 8001df6:	4d0d      	ldr	r5, [pc, #52]	; (8001e2c <__libc_init_array+0x38>)
 8001df8:	4c0d      	ldr	r4, [pc, #52]	; (8001e30 <__libc_init_array+0x3c>)
 8001dfa:	1b64      	subs	r4, r4, r5
 8001dfc:	10a4      	asrs	r4, r4, #2
 8001dfe:	2600      	movs	r6, #0
 8001e00:	42a6      	cmp	r6, r4
 8001e02:	d109      	bne.n	8001e18 <__libc_init_array+0x24>
 8001e04:	4d0b      	ldr	r5, [pc, #44]	; (8001e34 <__libc_init_array+0x40>)
 8001e06:	4c0c      	ldr	r4, [pc, #48]	; (8001e38 <__libc_init_array+0x44>)
 8001e08:	f000 f820 	bl	8001e4c <_init>
 8001e0c:	1b64      	subs	r4, r4, r5
 8001e0e:	10a4      	asrs	r4, r4, #2
 8001e10:	2600      	movs	r6, #0
 8001e12:	42a6      	cmp	r6, r4
 8001e14:	d105      	bne.n	8001e22 <__libc_init_array+0x2e>
 8001e16:	bd70      	pop	{r4, r5, r6, pc}
 8001e18:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e1c:	4798      	blx	r3
 8001e1e:	3601      	adds	r6, #1
 8001e20:	e7ee      	b.n	8001e00 <__libc_init_array+0xc>
 8001e22:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e26:	4798      	blx	r3
 8001e28:	3601      	adds	r6, #1
 8001e2a:	e7f2      	b.n	8001e12 <__libc_init_array+0x1e>
 8001e2c:	08001e74 	.word	0x08001e74
 8001e30:	08001e74 	.word	0x08001e74
 8001e34:	08001e74 	.word	0x08001e74
 8001e38:	08001e78 	.word	0x08001e78

08001e3c <memset>:
 8001e3c:	4402      	add	r2, r0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d100      	bne.n	8001e46 <memset+0xa>
 8001e44:	4770      	bx	lr
 8001e46:	f803 1b01 	strb.w	r1, [r3], #1
 8001e4a:	e7f9      	b.n	8001e40 <memset+0x4>

08001e4c <_init>:
 8001e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e4e:	bf00      	nop
 8001e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e52:	bc08      	pop	{r3}
 8001e54:	469e      	mov	lr, r3
 8001e56:	4770      	bx	lr

08001e58 <_fini>:
 8001e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e5a:	bf00      	nop
 8001e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e5e:	bc08      	pop	{r3}
 8001e60:	469e      	mov	lr, r3
 8001e62:	4770      	bx	lr
